
Main Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023c4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  0800254c  0800254c  0001254c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025a0  080025a0  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080025a0  080025a0  000125a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080025a8  080025a8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025a8  080025a8  000125a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025ac  080025ac  000125ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080025b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00000088  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000009c  2000009c  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005474  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000011cc  00000000  00000000  000254b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000518  00000000  00000000  00026688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000480  00000000  00000000  00026ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e59e  00000000  00000000  00027020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006003  00000000  00000000  000455be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bdf68  00000000  00000000  0004b5c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00109529  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000132c  00000000  00000000  0010957c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002534 	.word	0x08002534

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08002534 	.word	0x08002534

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <cmd>:
void cmd(unsigned char y)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(GPIOA, RS_Pin,0);
 80004d6:	2200      	movs	r2, #0
 80004d8:	2101      	movs	r1, #1
 80004da:	4831      	ldr	r0, [pc, #196]	; (80005a0 <cmd+0xd4>)
 80004dc:	f001 fbc0 	bl	8001c60 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, D7_Pin, (y & 0x80));
 80004e0:	79fb      	ldrb	r3, [r7, #7]
 80004e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80004e6:	b2db      	uxtb	r3, r3
 80004e8:	461a      	mov	r2, r3
 80004ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004ee:	482d      	ldr	r0, [pc, #180]	; (80005a4 <cmd+0xd8>)
 80004f0:	f001 fbb6 	bl	8001c60 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, D6_Pin, (y & 0x40));
 80004f4:	79fb      	ldrb	r3, [r7, #7]
 80004f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80004fa:	b2db      	uxtb	r3, r3
 80004fc:	461a      	mov	r2, r3
 80004fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000502:	4828      	ldr	r0, [pc, #160]	; (80005a4 <cmd+0xd8>)
 8000504:	f001 fbac 	bl	8001c60 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, D5_Pin, (y & 0x20));
 8000508:	79fb      	ldrb	r3, [r7, #7]
 800050a:	f003 0320 	and.w	r3, r3, #32
 800050e:	b2db      	uxtb	r3, r3
 8000510:	461a      	mov	r2, r3
 8000512:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000516:	4823      	ldr	r0, [pc, #140]	; (80005a4 <cmd+0xd8>)
 8000518:	f001 fba2 	bl	8001c60 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, D4_Pin, (y & 0x10));
 800051c:	79fb      	ldrb	r3, [r7, #7]
 800051e:	f003 0310 	and.w	r3, r3, #16
 8000522:	b2db      	uxtb	r3, r3
 8000524:	461a      	mov	r2, r3
 8000526:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800052a:	481e      	ldr	r0, [pc, #120]	; (80005a4 <cmd+0xd8>)
 800052c:	f001 fb98 	bl	8001c60 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, D3_Pin, (y & 0x08));
 8000530:	79fb      	ldrb	r3, [r7, #7]
 8000532:	f003 0308 	and.w	r3, r3, #8
 8000536:	b2db      	uxtb	r3, r3
 8000538:	461a      	mov	r2, r3
 800053a:	2102      	movs	r1, #2
 800053c:	4819      	ldr	r0, [pc, #100]	; (80005a4 <cmd+0xd8>)
 800053e:	f001 fb8f 	bl	8001c60 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, D2_Pin, (y & 0x04));
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	f003 0304 	and.w	r3, r3, #4
 8000548:	b2db      	uxtb	r3, r3
 800054a:	461a      	mov	r2, r3
 800054c:	2101      	movs	r1, #1
 800054e:	4815      	ldr	r0, [pc, #84]	; (80005a4 <cmd+0xd8>)
 8000550:	f001 fb86 	bl	8001c60 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, D1_Pin, (y & 0x02));
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	f003 0302 	and.w	r3, r3, #2
 800055a:	b2db      	uxtb	r3, r3
 800055c:	461a      	mov	r2, r3
 800055e:	2120      	movs	r1, #32
 8000560:	4811      	ldr	r0, [pc, #68]	; (80005a8 <cmd+0xdc>)
 8000562:	f001 fb7d 	bl	8001c60 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, D0_Pin, (y & 0x01));
 8000566:	79fb      	ldrb	r3, [r7, #7]
 8000568:	f003 0301 	and.w	r3, r3, #1
 800056c:	b2db      	uxtb	r3, r3
 800056e:	461a      	mov	r2, r3
 8000570:	2110      	movs	r1, #16
 8000572:	480d      	ldr	r0, [pc, #52]	; (80005a8 <cmd+0xdc>)
 8000574:	f001 fb74 	bl	8001c60 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA,EN_Pin,1);
 8000578:	2201      	movs	r2, #1
 800057a:	2102      	movs	r1, #2
 800057c:	4808      	ldr	r0, [pc, #32]	; (80005a0 <cmd+0xd4>)
 800057e:	f001 fb6f 	bl	8001c60 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 8000582:	2002      	movs	r0, #2
 8000584:	f000 fcae 	bl	8000ee4 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA,EN_Pin,0);
 8000588:	2200      	movs	r2, #0
 800058a:	2102      	movs	r1, #2
 800058c:	4804      	ldr	r0, [pc, #16]	; (80005a0 <cmd+0xd4>)
 800058e:	f001 fb67 	bl	8001c60 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 8000592:	2002      	movs	r0, #2
 8000594:	f000 fca6 	bl	8000ee4 <HAL_Delay>

}
 8000598:	bf00      	nop
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	40020000 	.word	0x40020000
 80005a4:	40020400 	.word	0x40020400
 80005a8:	40020800 	.word	0x40020800

080005ac <LCDStringdata>:
void LCDStringdata(unsigned char *s)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
    while(*s)
 80005b4:	e009      	b.n	80005ca <LCDStringdata+0x1e>
    {
    	data(*s++);
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	1c5a      	adds	r2, r3, #1
 80005ba:	607a      	str	r2, [r7, #4]
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	4618      	mov	r0, r3
 80005c0:	f000 f826 	bl	8000610 <data>
    	HAL_Delay(2);
 80005c4:	2002      	movs	r0, #2
 80005c6:	f000 fc8d 	bl	8000ee4 <HAL_Delay>
    while(*s)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d1f1      	bne.n	80005b6 <LCDStringdata+0xa>
    }
}
 80005d2:	bf00      	nop
 80005d4:	bf00      	nop
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}

080005dc <LCDInitialize>:

void LCDInitialize(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
    HAL_Delay(10);
 80005e0:	200a      	movs	r0, #10
 80005e2:	f000 fc7f 	bl	8000ee4 <HAL_Delay>
    cmd(0x38);
 80005e6:	2038      	movs	r0, #56	; 0x38
 80005e8:	f7ff ff70 	bl	80004cc <cmd>
    cmd(0x0E);
 80005ec:	200e      	movs	r0, #14
 80005ee:	f7ff ff6d 	bl	80004cc <cmd>
    cmd(0x06);
 80005f2:	2006      	movs	r0, #6
 80005f4:	f7ff ff6a 	bl	80004cc <cmd>
    cmd(0x01);
 80005f8:	2001      	movs	r0, #1
 80005fa:	f7ff ff67 	bl	80004cc <cmd>
    cmd(0x0C);
 80005fe:	200c      	movs	r0, #12
 8000600:	f7ff ff64 	bl	80004cc <cmd>
    HAL_Delay(10);
 8000604:	200a      	movs	r0, #10
 8000606:	f000 fc6d 	bl	8000ee4 <HAL_Delay>
}
 800060a:	bf00      	nop
 800060c:	bd80      	pop	{r7, pc}
	...

08000610 <data>:
void data(unsigned char z)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(GPIOA, RS_Pin,1);
 800061a:	2201      	movs	r2, #1
 800061c:	2101      	movs	r1, #1
 800061e:	4831      	ldr	r0, [pc, #196]	; (80006e4 <data+0xd4>)
 8000620:	f001 fb1e 	bl	8001c60 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, D7_Pin, (z & 0x80));
 8000624:	79fb      	ldrb	r3, [r7, #7]
 8000626:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800062a:	b2db      	uxtb	r3, r3
 800062c:	461a      	mov	r2, r3
 800062e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000632:	482d      	ldr	r0, [pc, #180]	; (80006e8 <data+0xd8>)
 8000634:	f001 fb14 	bl	8001c60 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, D6_Pin, (z & 0x40));
 8000638:	79fb      	ldrb	r3, [r7, #7]
 800063a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800063e:	b2db      	uxtb	r3, r3
 8000640:	461a      	mov	r2, r3
 8000642:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000646:	4828      	ldr	r0, [pc, #160]	; (80006e8 <data+0xd8>)
 8000648:	f001 fb0a 	bl	8001c60 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, D5_Pin, (z & 0x20));
 800064c:	79fb      	ldrb	r3, [r7, #7]
 800064e:	f003 0320 	and.w	r3, r3, #32
 8000652:	b2db      	uxtb	r3, r3
 8000654:	461a      	mov	r2, r3
 8000656:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800065a:	4823      	ldr	r0, [pc, #140]	; (80006e8 <data+0xd8>)
 800065c:	f001 fb00 	bl	8001c60 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, D4_Pin, (z & 0x10));
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	f003 0310 	and.w	r3, r3, #16
 8000666:	b2db      	uxtb	r3, r3
 8000668:	461a      	mov	r2, r3
 800066a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800066e:	481e      	ldr	r0, [pc, #120]	; (80006e8 <data+0xd8>)
 8000670:	f001 faf6 	bl	8001c60 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, D3_Pin, (z & 0x08));
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	f003 0308 	and.w	r3, r3, #8
 800067a:	b2db      	uxtb	r3, r3
 800067c:	461a      	mov	r2, r3
 800067e:	2102      	movs	r1, #2
 8000680:	4819      	ldr	r0, [pc, #100]	; (80006e8 <data+0xd8>)
 8000682:	f001 faed 	bl	8001c60 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, D2_Pin, (z & 0x04));
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	f003 0304 	and.w	r3, r3, #4
 800068c:	b2db      	uxtb	r3, r3
 800068e:	461a      	mov	r2, r3
 8000690:	2101      	movs	r1, #1
 8000692:	4815      	ldr	r0, [pc, #84]	; (80006e8 <data+0xd8>)
 8000694:	f001 fae4 	bl	8001c60 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, D1_Pin, (z & 0x02));
 8000698:	79fb      	ldrb	r3, [r7, #7]
 800069a:	f003 0302 	and.w	r3, r3, #2
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	461a      	mov	r2, r3
 80006a2:	2120      	movs	r1, #32
 80006a4:	4811      	ldr	r0, [pc, #68]	; (80006ec <data+0xdc>)
 80006a6:	f001 fadb 	bl	8001c60 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, D0_Pin, (z & 0x01));
 80006aa:	79fb      	ldrb	r3, [r7, #7]
 80006ac:	f003 0301 	and.w	r3, r3, #1
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	461a      	mov	r2, r3
 80006b4:	2110      	movs	r1, #16
 80006b6:	480d      	ldr	r0, [pc, #52]	; (80006ec <data+0xdc>)
 80006b8:	f001 fad2 	bl	8001c60 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA,EN_Pin,1);
 80006bc:	2201      	movs	r2, #1
 80006be:	2102      	movs	r1, #2
 80006c0:	4808      	ldr	r0, [pc, #32]	; (80006e4 <data+0xd4>)
 80006c2:	f001 facd 	bl	8001c60 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 80006c6:	2002      	movs	r0, #2
 80006c8:	f000 fc0c 	bl	8000ee4 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA,EN_Pin,0);
 80006cc:	2200      	movs	r2, #0
 80006ce:	2102      	movs	r1, #2
 80006d0:	4804      	ldr	r0, [pc, #16]	; (80006e4 <data+0xd4>)
 80006d2:	f001 fac5 	bl	8001c60 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 80006d6:	2002      	movs	r0, #2
 80006d8:	f000 fc04 	bl	8000ee4 <HAL_Delay>

}
 80006dc:	bf00      	nop
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40020000 	.word	0x40020000
 80006e8:	40020400 	.word	0x40020400
 80006ec:	40020800 	.word	0x40020800

080006f0 <DisplauNumeric>:
void DisplauNumeric(unsigned int Value)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	data(((Value%10000)/1000)+0x30);
 80006f8:	687a      	ldr	r2, [r7, #4]
 80006fa:	4b28      	ldr	r3, [pc, #160]	; (800079c <DisplauNumeric+0xac>)
 80006fc:	fba3 1302 	umull	r1, r3, r3, r2
 8000700:	0b5b      	lsrs	r3, r3, #13
 8000702:	f242 7110 	movw	r1, #10000	; 0x2710
 8000706:	fb01 f303 	mul.w	r3, r1, r3
 800070a:	1ad3      	subs	r3, r2, r3
 800070c:	4a24      	ldr	r2, [pc, #144]	; (80007a0 <DisplauNumeric+0xb0>)
 800070e:	fba2 2303 	umull	r2, r3, r2, r3
 8000712:	099b      	lsrs	r3, r3, #6
 8000714:	b2db      	uxtb	r3, r3
 8000716:	3330      	adds	r3, #48	; 0x30
 8000718:	b2db      	uxtb	r3, r3
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff ff78 	bl	8000610 <data>
	data(((Value%1000)/100)+0x30);
 8000720:	687a      	ldr	r2, [r7, #4]
 8000722:	4b1f      	ldr	r3, [pc, #124]	; (80007a0 <DisplauNumeric+0xb0>)
 8000724:	fba3 1302 	umull	r1, r3, r3, r2
 8000728:	099b      	lsrs	r3, r3, #6
 800072a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800072e:	fb01 f303 	mul.w	r3, r1, r3
 8000732:	1ad3      	subs	r3, r2, r3
 8000734:	4a1b      	ldr	r2, [pc, #108]	; (80007a4 <DisplauNumeric+0xb4>)
 8000736:	fba2 2303 	umull	r2, r3, r2, r3
 800073a:	095b      	lsrs	r3, r3, #5
 800073c:	b2db      	uxtb	r3, r3
 800073e:	3330      	adds	r3, #48	; 0x30
 8000740:	b2db      	uxtb	r3, r3
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff ff64 	bl	8000610 <data>
	data(((Value%100)/10)+0x30);
 8000748:	687a      	ldr	r2, [r7, #4]
 800074a:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <DisplauNumeric+0xb4>)
 800074c:	fba3 1302 	umull	r1, r3, r3, r2
 8000750:	095b      	lsrs	r3, r3, #5
 8000752:	2164      	movs	r1, #100	; 0x64
 8000754:	fb01 f303 	mul.w	r3, r1, r3
 8000758:	1ad3      	subs	r3, r2, r3
 800075a:	4a13      	ldr	r2, [pc, #76]	; (80007a8 <DisplauNumeric+0xb8>)
 800075c:	fba2 2303 	umull	r2, r3, r2, r3
 8000760:	08db      	lsrs	r3, r3, #3
 8000762:	b2db      	uxtb	r3, r3
 8000764:	3330      	adds	r3, #48	; 0x30
 8000766:	b2db      	uxtb	r3, r3
 8000768:	4618      	mov	r0, r3
 800076a:	f7ff ff51 	bl	8000610 <data>
	data((Value%10)/0x30);
 800076e:	6879      	ldr	r1, [r7, #4]
 8000770:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <DisplauNumeric+0xb8>)
 8000772:	fba3 2301 	umull	r2, r3, r3, r1
 8000776:	08da      	lsrs	r2, r3, #3
 8000778:	4613      	mov	r3, r2
 800077a:	009b      	lsls	r3, r3, #2
 800077c:	4413      	add	r3, r2
 800077e:	005b      	lsls	r3, r3, #1
 8000780:	1aca      	subs	r2, r1, r3
 8000782:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <DisplauNumeric+0xbc>)
 8000784:	fba3 2302 	umull	r2, r3, r3, r2
 8000788:	095b      	lsrs	r3, r3, #5
 800078a:	b2db      	uxtb	r3, r3
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff ff3f 	bl	8000610 <data>

}
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	d1b71759 	.word	0xd1b71759
 80007a0:	10624dd3 	.word	0x10624dd3
 80007a4:	51eb851f 	.word	0x51eb851f
 80007a8:	cccccccd 	.word	0xcccccccd
 80007ac:	aaaaaaab 	.word	0xaaaaaaab

080007b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b4:	f000 fb24 	bl	8000e00 <HAL_Init>

  /* USER CODE BEGIN Init */
  LCDInitialize();
 80007b8:	f7ff ff10 	bl	80005dc <LCDInitialize>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007bc:	f000 f8f2 	bl	80009a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c0:	f000 f9a0 	bl	8000b04 <MX_GPIO_Init>
  MX_ADC1_Init();
 80007c4:	f000 f94c 	bl	8000a60 <MX_ADC1_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /*IR Sensor*/

	  irstate=HAL_GPIO_ReadPin(GPIOC,IR_Pin);
 80007c8:	2140      	movs	r1, #64	; 0x40
 80007ca:	4863      	ldr	r0, [pc, #396]	; (8000958 <main+0x1a8>)
 80007cc:	f001 fa30 	bl	8001c30 <HAL_GPIO_ReadPin>
 80007d0:	4603      	mov	r3, r0
 80007d2:	461a      	mov	r2, r3
 80007d4:	4b61      	ldr	r3, [pc, #388]	; (800095c <main+0x1ac>)
 80007d6:	601a      	str	r2, [r3, #0]
	  if(irstate==1 && state==0)
 80007d8:	4b60      	ldr	r3, [pc, #384]	; (800095c <main+0x1ac>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2b01      	cmp	r3, #1
 80007de:	d113      	bne.n	8000808 <main+0x58>
 80007e0:	4b5f      	ldr	r3, [pc, #380]	; (8000960 <main+0x1b0>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d10f      	bne.n	8000808 <main+0x58>
	  {
		  HAL_GPIO_WritePin(BUZ_GPIO_Port,BUZ_Pin,1);
 80007e8:	2201      	movs	r2, #1
 80007ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007ee:	485a      	ldr	r0, [pc, #360]	; (8000958 <main+0x1a8>)
 80007f0:	f001 fa36 	bl	8001c60 <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 80007f4:	2064      	movs	r0, #100	; 0x64
 80007f6:	f000 fb75 	bl	8000ee4 <HAL_Delay>
	  	  cmd(0x80);
 80007fa:	2080      	movs	r0, #128	; 0x80
 80007fc:	f7ff fe66 	bl	80004cc <cmd>
	  	  LCDStringdata("Door Opened");
 8000800:	4858      	ldr	r0, [pc, #352]	; (8000964 <main+0x1b4>)
 8000802:	f7ff fed3 	bl	80005ac <LCDStringdata>
 8000806:	e051      	b.n	80008ac <main+0xfc>
	  }
	  else if(irstate==0 && state==1)
 8000808:	4b54      	ldr	r3, [pc, #336]	; (800095c <main+0x1ac>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d14d      	bne.n	80008ac <main+0xfc>
 8000810:	4b53      	ldr	r3, [pc, #332]	; (8000960 <main+0x1b0>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2b01      	cmp	r3, #1
 8000816:	d149      	bne.n	80008ac <main+0xfc>
	  {

	  	  cmd(0x80);
 8000818:	2080      	movs	r0, #128	; 0x80
 800081a:	f7ff fe57 	bl	80004cc <cmd>
	  	  LCDStringdata("Door Closed");
 800081e:	4852      	ldr	r0, [pc, #328]	; (8000968 <main+0x1b8>)
 8000820:	f7ff fec4 	bl	80005ac <LCDStringdata>
	  	/*Temperature Sensor*/
	  		  cmd(0x80);
 8000824:	2080      	movs	r0, #128	; 0x80
 8000826:	f7ff fe51 	bl	80004cc <cmd>
	  		  LCDStringdata("THE TEMPERATURE IS:");
 800082a:	4850      	ldr	r0, [pc, #320]	; (800096c <main+0x1bc>)
 800082c:	f7ff febe 	bl	80005ac <LCDStringdata>
	  		  HAL_Delay(2000);
 8000830:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000834:	f000 fb56 	bl	8000ee4 <HAL_Delay>
	  		  cmd(0x01);
 8000838:	2001      	movs	r0, #1
 800083a:	f7ff fe47 	bl	80004cc <cmd>
	  		  HAL_ADC_Start(&hadc1);
 800083e:	484c      	ldr	r0, [pc, #304]	; (8000970 <main+0x1c0>)
 8000840:	f000 fbb8 	bl	8000fb4 <HAL_ADC_Start>
	  		  HAL_ADC_PollForConversion(&hadc1,500);
 8000844:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000848:	4849      	ldr	r0, [pc, #292]	; (8000970 <main+0x1c0>)
 800084a:	f000 fcb8 	bl	80011be <HAL_ADC_PollForConversion>
	  		  read1=HAL_ADC_GetValue(&hadc1);
 800084e:	4848      	ldr	r0, [pc, #288]	; (8000970 <main+0x1c0>)
 8000850:	f000 fd40 	bl	80012d4 <HAL_ADC_GetValue>
 8000854:	4603      	mov	r3, r0
 8000856:	4a47      	ldr	r2, [pc, #284]	; (8000974 <main+0x1c4>)
 8000858:	6013      	str	r3, [r2, #0]
	  		  HAL_ADC_Stop(&hadc1);
 800085a:	4845      	ldr	r0, [pc, #276]	; (8000970 <main+0x1c0>)
 800085c:	f000 fc7c 	bl	8001158 <HAL_ADC_Stop>
	  		  cmd(0x80);
 8000860:	2080      	movs	r0, #128	; 0x80
 8000862:	f7ff fe33 	bl	80004cc <cmd>
	  		  DisplauNumeric(read1);
 8000866:	4b43      	ldr	r3, [pc, #268]	; (8000974 <main+0x1c4>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff ff40 	bl	80006f0 <DisplauNumeric>
	  		  if(read1<=rt)
 8000870:	4b40      	ldr	r3, [pc, #256]	; (8000974 <main+0x1c4>)
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	4b40      	ldr	r3, [pc, #256]	; (8000978 <main+0x1c8>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	429a      	cmp	r2, r3
 800087a:	d80a      	bhi.n	8000892 <main+0xe2>
	  		  {

	  			  cmd(0xC0);
 800087c:	20c0      	movs	r0, #192	; 0xc0
 800087e:	f7ff fe25 	bl	80004cc <cmd>
	  			  LCDStringdata("AC is OFF");
 8000882:	483e      	ldr	r0, [pc, #248]	; (800097c <main+0x1cc>)
 8000884:	f7ff fe92 	bl	80005ac <LCDStringdata>
	  			  HAL_Delay(2000);
 8000888:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800088c:	f000 fb2a 	bl	8000ee4 <HAL_Delay>
 8000890:	e009      	b.n	80008a6 <main+0xf6>
	  		  }
	  		  else
	  		  {
	  			 // cmd(0x01);
	  		    cmd(0xC0);
 8000892:	20c0      	movs	r0, #192	; 0xc0
 8000894:	f7ff fe1a 	bl	80004cc <cmd>
	  		    LCDStringdata("AC is ON");
 8000898:	4839      	ldr	r0, [pc, #228]	; (8000980 <main+0x1d0>)
 800089a:	f7ff fe87 	bl	80005ac <LCDStringdata>
	  		    HAL_Delay(2000);
 800089e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008a2:	f000 fb1f 	bl	8000ee4 <HAL_Delay>
	  		  }
	  		  cmd(0x01);
 80008a6:	2001      	movs	r0, #1
 80008a8:	f7ff fe10 	bl	80004cc <cmd>
	  }
	  state=irstate;
 80008ac:	4b2b      	ldr	r3, [pc, #172]	; (800095c <main+0x1ac>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a2b      	ldr	r2, [pc, #172]	; (8000960 <main+0x1b0>)
 80008b2:	6013      	str	r3, [r2, #0]
	  cmd(0x01);
 80008b4:	2001      	movs	r0, #1
 80008b6:	f7ff fe09 	bl	80004cc <cmd>
	  }
	  cmd(0x01);*/

	  	  /*Window Detection*/

	  	switchState=HAL_GPIO_ReadPin(GPIOB,S1_Pin);
 80008ba:	2180      	movs	r1, #128	; 0x80
 80008bc:	4831      	ldr	r0, [pc, #196]	; (8000984 <main+0x1d4>)
 80008be:	f001 f9b7 	bl	8001c30 <HAL_GPIO_ReadPin>
 80008c2:	4603      	mov	r3, r0
 80008c4:	461a      	mov	r2, r3
 80008c6:	4b30      	ldr	r3, [pc, #192]	; (8000988 <main+0x1d8>)
 80008c8:	601a      	str	r2, [r3, #0]

	  	if(switchState==GPIO_PIN_SET && lastswitchState==GPIO_PIN_RESET)
 80008ca:	4b2f      	ldr	r3, [pc, #188]	; (8000988 <main+0x1d8>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d116      	bne.n	8000900 <main+0x150>
 80008d2:	4b2e      	ldr	r3, [pc, #184]	; (800098c <main+0x1dc>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d112      	bne.n	8000900 <main+0x150>
	  	{
	  		ledstate=(ledstate==GPIO_PIN_RESET)? GPIO_PIN_SET : GPIO_PIN_RESET ;
 80008da:	4b2d      	ldr	r3, [pc, #180]	; (8000990 <main+0x1e0>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	bf0c      	ite	eq
 80008e2:	2301      	moveq	r3, #1
 80008e4:	2300      	movne	r3, #0
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	461a      	mov	r2, r3
 80008ea:	4b29      	ldr	r3, [pc, #164]	; (8000990 <main+0x1e0>)
 80008ec:	601a      	str	r2, [r3, #0]
	  		HAL_GPIO_WritePin(GPIOA, L1_Pin, ledstate);
 80008ee:	4b28      	ldr	r3, [pc, #160]	; (8000990 <main+0x1e0>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	461a      	mov	r2, r3
 80008f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008fa:	4826      	ldr	r0, [pc, #152]	; (8000994 <main+0x1e4>)
 80008fc:	f001 f9b0 	bl	8001c60 <HAL_GPIO_WritePin>
	  	}
	  	lastswitchState=switchState;
 8000900:	4b21      	ldr	r3, [pc, #132]	; (8000988 <main+0x1d8>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a21      	ldr	r2, [pc, #132]	; (800098c <main+0x1dc>)
 8000906:	6013      	str	r3, [r2, #0]

	  	switchState1=HAL_GPIO_ReadPin(GPIOB,S2_Pin);
 8000908:	2108      	movs	r1, #8
 800090a:	481e      	ldr	r0, [pc, #120]	; (8000984 <main+0x1d4>)
 800090c:	f001 f990 	bl	8001c30 <HAL_GPIO_ReadPin>
 8000910:	4603      	mov	r3, r0
 8000912:	461a      	mov	r2, r3
 8000914:	4b20      	ldr	r3, [pc, #128]	; (8000998 <main+0x1e8>)
 8000916:	601a      	str	r2, [r3, #0]

	  	if(switchState1==GPIO_PIN_SET && lastswitchState1==GPIO_PIN_RESET)
 8000918:	4b1f      	ldr	r3, [pc, #124]	; (8000998 <main+0x1e8>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2b01      	cmp	r3, #1
 800091e:	d116      	bne.n	800094e <main+0x19e>
 8000920:	4b1e      	ldr	r3, [pc, #120]	; (800099c <main+0x1ec>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d112      	bne.n	800094e <main+0x19e>
	  	{
	  		ledstate1=(ledstate1==GPIO_PIN_RESET)? GPIO_PIN_SET : GPIO_PIN_RESET ;
 8000928:	4b1d      	ldr	r3, [pc, #116]	; (80009a0 <main+0x1f0>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	bf0c      	ite	eq
 8000930:	2301      	moveq	r3, #1
 8000932:	2300      	movne	r3, #0
 8000934:	b2db      	uxtb	r3, r3
 8000936:	461a      	mov	r2, r3
 8000938:	4b19      	ldr	r3, [pc, #100]	; (80009a0 <main+0x1f0>)
 800093a:	601a      	str	r2, [r3, #0]
	  		HAL_GPIO_WritePin(GPIOA, L2_Pin, ledstate1);
 800093c:	4b18      	ldr	r3, [pc, #96]	; (80009a0 <main+0x1f0>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	b2db      	uxtb	r3, r3
 8000942:	461a      	mov	r2, r3
 8000944:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000948:	4812      	ldr	r0, [pc, #72]	; (8000994 <main+0x1e4>)
 800094a:	f001 f989 	bl	8001c60 <HAL_GPIO_WritePin>
	  	}
	  	lastswitchState1=switchState1;
 800094e:	4b12      	ldr	r3, [pc, #72]	; (8000998 <main+0x1e8>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a12      	ldr	r2, [pc, #72]	; (800099c <main+0x1ec>)
 8000954:	6013      	str	r3, [r2, #0]
	  irstate=HAL_GPIO_ReadPin(GPIOC,IR_Pin);
 8000956:	e737      	b.n	80007c8 <main+0x18>
 8000958:	40020800 	.word	0x40020800
 800095c:	2000007c 	.word	0x2000007c
 8000960:	20000004 	.word	0x20000004
 8000964:	0800254c 	.word	0x0800254c
 8000968:	08002558 	.word	0x08002558
 800096c:	08002564 	.word	0x08002564
 8000970:	20000030 	.word	0x20000030
 8000974:	20000078 	.word	0x20000078
 8000978:	20000000 	.word	0x20000000
 800097c:	08002578 	.word	0x08002578
 8000980:	08002584 	.word	0x08002584
 8000984:	40020400 	.word	0x40020400
 8000988:	20000080 	.word	0x20000080
 800098c:	20000084 	.word	0x20000084
 8000990:	20000088 	.word	0x20000088
 8000994:	40020000 	.word	0x40020000
 8000998:	2000008c 	.word	0x2000008c
 800099c:	20000090 	.word	0x20000090
 80009a0:	20000094 	.word	0x20000094

080009a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b094      	sub	sp, #80	; 0x50
 80009a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009aa:	f107 0320 	add.w	r3, r7, #32
 80009ae:	2230      	movs	r2, #48	; 0x30
 80009b0:	2100      	movs	r1, #0
 80009b2:	4618      	mov	r0, r3
 80009b4:	f001 fdb6 	bl	8002524 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b8:	f107 030c 	add.w	r3, r7, #12
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c8:	2300      	movs	r3, #0
 80009ca:	60bb      	str	r3, [r7, #8]
 80009cc:	4b22      	ldr	r3, [pc, #136]	; (8000a58 <SystemClock_Config+0xb4>)
 80009ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d0:	4a21      	ldr	r2, [pc, #132]	; (8000a58 <SystemClock_Config+0xb4>)
 80009d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d6:	6413      	str	r3, [r2, #64]	; 0x40
 80009d8:	4b1f      	ldr	r3, [pc, #124]	; (8000a58 <SystemClock_Config+0xb4>)
 80009da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e0:	60bb      	str	r3, [r7, #8]
 80009e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009e4:	2300      	movs	r3, #0
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	4b1c      	ldr	r3, [pc, #112]	; (8000a5c <SystemClock_Config+0xb8>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a1b      	ldr	r2, [pc, #108]	; (8000a5c <SystemClock_Config+0xb8>)
 80009ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f2:	6013      	str	r3, [r2, #0]
 80009f4:	4b19      	ldr	r3, [pc, #100]	; (8000a5c <SystemClock_Config+0xb8>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a00:	2302      	movs	r3, #2
 8000a02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a04:	2301      	movs	r3, #1
 8000a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a08:	2310      	movs	r3, #16
 8000a0a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a10:	f107 0320 	add.w	r3, r7, #32
 8000a14:	4618      	mov	r0, r3
 8000a16:	f001 f93d 	bl	8001c94 <HAL_RCC_OscConfig>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000a20:	f000 f916 	bl	8000c50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a24:	230f      	movs	r3, #15
 8000a26:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a30:	2300      	movs	r3, #0
 8000a32:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a34:	2300      	movs	r3, #0
 8000a36:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a38:	f107 030c 	add.w	r3, r7, #12
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f001 fba0 	bl	8002184 <HAL_RCC_ClockConfig>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000a4a:	f000 f901 	bl	8000c50 <Error_Handler>
  }
}
 8000a4e:	bf00      	nop
 8000a50:	3750      	adds	r7, #80	; 0x50
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	40007000 	.word	0x40007000

08000a60 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a66:	463b      	mov	r3, r7
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a72:	4b21      	ldr	r3, [pc, #132]	; (8000af8 <MX_ADC1_Init+0x98>)
 8000a74:	4a21      	ldr	r2, [pc, #132]	; (8000afc <MX_ADC1_Init+0x9c>)
 8000a76:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000a78:	4b1f      	ldr	r3, [pc, #124]	; (8000af8 <MX_ADC1_Init+0x98>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a7e:	4b1e      	ldr	r3, [pc, #120]	; (8000af8 <MX_ADC1_Init+0x98>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000a84:	4b1c      	ldr	r3, [pc, #112]	; (8000af8 <MX_ADC1_Init+0x98>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a8a:	4b1b      	ldr	r3, [pc, #108]	; (8000af8 <MX_ADC1_Init+0x98>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a90:	4b19      	ldr	r3, [pc, #100]	; (8000af8 <MX_ADC1_Init+0x98>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a98:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <MX_ADC1_Init+0x98>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a9e:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <MX_ADC1_Init+0x98>)
 8000aa0:	4a17      	ldr	r2, [pc, #92]	; (8000b00 <MX_ADC1_Init+0xa0>)
 8000aa2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000aa4:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <MX_ADC1_Init+0x98>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000aaa:	4b13      	ldr	r3, [pc, #76]	; (8000af8 <MX_ADC1_Init+0x98>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ab0:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <MX_ADC1_Init+0x98>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <MX_ADC1_Init+0x98>)
 8000aba:	2201      	movs	r2, #1
 8000abc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000abe:	480e      	ldr	r0, [pc, #56]	; (8000af8 <MX_ADC1_Init+0x98>)
 8000ac0:	f000 fa34 	bl	8000f2c <HAL_ADC_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000aca:	f000 f8c1 	bl	8000c50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000ace:	230c      	movs	r3, #12
 8000ad0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ada:	463b      	mov	r3, r7
 8000adc:	4619      	mov	r1, r3
 8000ade:	4806      	ldr	r0, [pc, #24]	; (8000af8 <MX_ADC1_Init+0x98>)
 8000ae0:	f000 fc06 	bl	80012f0 <HAL_ADC_ConfigChannel>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000aea:	f000 f8b1 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000aee:	bf00      	nop
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000030 	.word	0x20000030
 8000afc:	40012000 	.word	0x40012000
 8000b00:	0f000001 	.word	0x0f000001

08000b04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	; 0x28
 8000b08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0a:	f107 0314 	add.w	r3, r7, #20
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
 8000b18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	613b      	str	r3, [r7, #16]
 8000b1e:	4b48      	ldr	r3, [pc, #288]	; (8000c40 <MX_GPIO_Init+0x13c>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a47      	ldr	r2, [pc, #284]	; (8000c40 <MX_GPIO_Init+0x13c>)
 8000b24:	f043 0304 	orr.w	r3, r3, #4
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b45      	ldr	r3, [pc, #276]	; (8000c40 <MX_GPIO_Init+0x13c>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0304 	and.w	r3, r3, #4
 8000b32:	613b      	str	r3, [r7, #16]
 8000b34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	4b41      	ldr	r3, [pc, #260]	; (8000c40 <MX_GPIO_Init+0x13c>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a40      	ldr	r2, [pc, #256]	; (8000c40 <MX_GPIO_Init+0x13c>)
 8000b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b3e      	ldr	r3, [pc, #248]	; (8000c40 <MX_GPIO_Init+0x13c>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	60bb      	str	r3, [r7, #8]
 8000b56:	4b3a      	ldr	r3, [pc, #232]	; (8000c40 <MX_GPIO_Init+0x13c>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a39      	ldr	r2, [pc, #228]	; (8000c40 <MX_GPIO_Init+0x13c>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b37      	ldr	r3, [pc, #220]	; (8000c40 <MX_GPIO_Init+0x13c>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	60bb      	str	r3, [r7, #8]
 8000b6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	607b      	str	r3, [r7, #4]
 8000b72:	4b33      	ldr	r3, [pc, #204]	; (8000c40 <MX_GPIO_Init+0x13c>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a32      	ldr	r2, [pc, #200]	; (8000c40 <MX_GPIO_Init+0x13c>)
 8000b78:	f043 0302 	orr.w	r3, r3, #2
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b30      	ldr	r3, [pc, #192]	; (8000c40 <MX_GPIO_Init+0x13c>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0302 	and.w	r3, r3, #2
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RS_Pin|EN_Pin|L2_Pin|L1_Pin, GPIO_PIN_RESET);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	f240 3103 	movw	r1, #771	; 0x303
 8000b90:	482c      	ldr	r0, [pc, #176]	; (8000c44 <MX_GPIO_Init+0x140>)
 8000b92:	f001 f865 	bl	8001c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, D0_Pin|D1_Pin|BUZ_Pin, GPIO_PIN_RESET);
 8000b96:	2200      	movs	r2, #0
 8000b98:	f44f 710c 	mov.w	r1, #560	; 0x230
 8000b9c:	482a      	ldr	r0, [pc, #168]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b9e:	f001 f85f 	bl	8001c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D2_Pin|D3_Pin|D4_Pin|D5_Pin
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f24f 0103 	movw	r1, #61443	; 0xf003
 8000ba8:	4828      	ldr	r0, [pc, #160]	; (8000c4c <MX_GPIO_Init+0x148>)
 8000baa:	f001 f859 	bl	8001c60 <HAL_GPIO_WritePin>
                          |D6_Pin|D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RS_Pin EN_Pin L2_Pin L1_Pin */
  GPIO_InitStruct.Pin = RS_Pin|EN_Pin|L2_Pin|L1_Pin;
 8000bae:	f240 3303 	movw	r3, #771	; 0x303
 8000bb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	481f      	ldr	r0, [pc, #124]	; (8000c44 <MX_GPIO_Init+0x140>)
 8000bc8:	f000 fe96 	bl	80018f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D1_Pin BUZ_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|BUZ_Pin;
 8000bcc:	f44f 730c 	mov.w	r3, #560	; 0x230
 8000bd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bde:	f107 0314 	add.w	r3, r7, #20
 8000be2:	4619      	mov	r1, r3
 8000be4:	4818      	ldr	r0, [pc, #96]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000be6:	f000 fe87 	bl	80018f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D2_Pin D3_Pin D4_Pin D5_Pin
                           D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = D2_Pin|D3_Pin|D4_Pin|D5_Pin
 8000bea:	f24f 0303 	movw	r3, #61443	; 0xf003
 8000bee:	617b      	str	r3, [r7, #20]
                          |D6_Pin|D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	4619      	mov	r1, r3
 8000c02:	4812      	ldr	r0, [pc, #72]	; (8000c4c <MX_GPIO_Init+0x148>)
 8000c04:	f000 fe78 	bl	80018f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IR_Pin */
  GPIO_InitStruct.Pin = IR_Pin;
 8000c08:	2340      	movs	r3, #64	; 0x40
 8000c0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IR_GPIO_Port, &GPIO_InitStruct);
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	4619      	mov	r1, r3
 8000c1a:	480b      	ldr	r0, [pc, #44]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000c1c:	f000 fe6c 	bl	80018f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : S2_Pin S1_Pin */
  GPIO_InitStruct.Pin = S2_Pin|S1_Pin;
 8000c20:	2388      	movs	r3, #136	; 0x88
 8000c22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c24:	2300      	movs	r3, #0
 8000c26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	4619      	mov	r1, r3
 8000c32:	4806      	ldr	r0, [pc, #24]	; (8000c4c <MX_GPIO_Init+0x148>)
 8000c34:	f000 fe60 	bl	80018f8 <HAL_GPIO_Init>

}
 8000c38:	bf00      	nop
 8000c3a:	3728      	adds	r7, #40	; 0x28
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40023800 	.word	0x40023800
 8000c44:	40020000 	.word	0x40020000
 8000c48:	40020800 	.word	0x40020800
 8000c4c:	40020400 	.word	0x40020400

08000c50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c54:	b672      	cpsid	i
}
 8000c56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <Error_Handler+0x8>
	...

08000c5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	607b      	str	r3, [r7, #4]
 8000c66:	4b10      	ldr	r3, [pc, #64]	; (8000ca8 <HAL_MspInit+0x4c>)
 8000c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6a:	4a0f      	ldr	r2, [pc, #60]	; (8000ca8 <HAL_MspInit+0x4c>)
 8000c6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c70:	6453      	str	r3, [r2, #68]	; 0x44
 8000c72:	4b0d      	ldr	r3, [pc, #52]	; (8000ca8 <HAL_MspInit+0x4c>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	603b      	str	r3, [r7, #0]
 8000c82:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <HAL_MspInit+0x4c>)
 8000c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c86:	4a08      	ldr	r2, [pc, #32]	; (8000ca8 <HAL_MspInit+0x4c>)
 8000c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c8e:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <HAL_MspInit+0x4c>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c96:	603b      	str	r3, [r7, #0]
 8000c98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	40023800 	.word	0x40023800

08000cac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08a      	sub	sp, #40	; 0x28
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a17      	ldr	r2, [pc, #92]	; (8000d28 <HAL_ADC_MspInit+0x7c>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d127      	bne.n	8000d1e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	613b      	str	r3, [r7, #16]
 8000cd2:	4b16      	ldr	r3, [pc, #88]	; (8000d2c <HAL_ADC_MspInit+0x80>)
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd6:	4a15      	ldr	r2, [pc, #84]	; (8000d2c <HAL_ADC_MspInit+0x80>)
 8000cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cde:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <HAL_ADC_MspInit+0x80>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ce6:	613b      	str	r3, [r7, #16]
 8000ce8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <HAL_ADC_MspInit+0x80>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a0e      	ldr	r2, [pc, #56]	; (8000d2c <HAL_ADC_MspInit+0x80>)
 8000cf4:	f043 0304 	orr.w	r3, r3, #4
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <HAL_ADC_MspInit+0x80>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0304 	and.w	r3, r3, #4
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d06:	2304      	movs	r3, #4
 8000d08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d12:	f107 0314 	add.w	r3, r7, #20
 8000d16:	4619      	mov	r1, r3
 8000d18:	4805      	ldr	r0, [pc, #20]	; (8000d30 <HAL_ADC_MspInit+0x84>)
 8000d1a:	f000 fded 	bl	80018f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d1e:	bf00      	nop
 8000d20:	3728      	adds	r7, #40	; 0x28
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40012000 	.word	0x40012000
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40020800 	.word	0x40020800

08000d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <NMI_Handler+0x4>

08000d3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d3e:	e7fe      	b.n	8000d3e <HardFault_Handler+0x4>

08000d40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <MemManage_Handler+0x4>

08000d46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d4a:	e7fe      	b.n	8000d4a <BusFault_Handler+0x4>

08000d4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <UsageFault_Handler+0x4>

08000d52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d80:	f000 f890 	bl	8000ea4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d84:	bf00      	nop
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <SystemInit+0x20>)
 8000d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d92:	4a05      	ldr	r2, [pc, #20]	; (8000da8 <SystemInit+0x20>)
 8000d94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000dac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000de4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000db0:	480d      	ldr	r0, [pc, #52]	; (8000de8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000db2:	490e      	ldr	r1, [pc, #56]	; (8000dec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000db4:	4a0e      	ldr	r2, [pc, #56]	; (8000df0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000db6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db8:	e002      	b.n	8000dc0 <LoopCopyDataInit>

08000dba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dbe:	3304      	adds	r3, #4

08000dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc4:	d3f9      	bcc.n	8000dba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dc6:	4a0b      	ldr	r2, [pc, #44]	; (8000df4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dc8:	4c0b      	ldr	r4, [pc, #44]	; (8000df8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dcc:	e001      	b.n	8000dd2 <LoopFillZerobss>

08000dce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd0:	3204      	adds	r2, #4

08000dd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd4:	d3fb      	bcc.n	8000dce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dd6:	f7ff ffd7 	bl	8000d88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dda:	f001 fb7f 	bl	80024dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dde:	f7ff fce7 	bl	80007b0 <main>
  bx  lr    
 8000de2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000de4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000de8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dec:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000df0:	080025b0 	.word	0x080025b0
  ldr r2, =_sbss
 8000df4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000df8:	2000009c 	.word	0x2000009c

08000dfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dfc:	e7fe      	b.n	8000dfc <ADC_IRQHandler>
	...

08000e00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e04:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <HAL_Init+0x40>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a0d      	ldr	r2, [pc, #52]	; (8000e40 <HAL_Init+0x40>)
 8000e0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e10:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <HAL_Init+0x40>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a0a      	ldr	r2, [pc, #40]	; (8000e40 <HAL_Init+0x40>)
 8000e16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e1c:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <HAL_Init+0x40>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a07      	ldr	r2, [pc, #28]	; (8000e40 <HAL_Init+0x40>)
 8000e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e28:	2003      	movs	r0, #3
 8000e2a:	f000 fd31 	bl	8001890 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e2e:	200f      	movs	r0, #15
 8000e30:	f000 f808 	bl	8000e44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e34:	f7ff ff12 	bl	8000c5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40023c00 	.word	0x40023c00

08000e44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e4c:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <HAL_InitTick+0x54>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <HAL_InitTick+0x58>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	4619      	mov	r1, r3
 8000e56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 fd3b 	bl	80018de <HAL_SYSTICK_Config>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e00e      	b.n	8000e90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2b0f      	cmp	r3, #15
 8000e76:	d80a      	bhi.n	8000e8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	6879      	ldr	r1, [r7, #4]
 8000e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e80:	f000 fd11 	bl	80018a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e84:	4a06      	ldr	r2, [pc, #24]	; (8000ea0 <HAL_InitTick+0x5c>)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	e000      	b.n	8000e90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20000008 	.word	0x20000008
 8000e9c:	20000010 	.word	0x20000010
 8000ea0:	2000000c 	.word	0x2000000c

08000ea4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <HAL_IncTick+0x20>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	461a      	mov	r2, r3
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <HAL_IncTick+0x24>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	4a04      	ldr	r2, [pc, #16]	; (8000ec8 <HAL_IncTick+0x24>)
 8000eb6:	6013      	str	r3, [r2, #0]
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	20000010 	.word	0x20000010
 8000ec8:	20000098 	.word	0x20000098

08000ecc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed0:	4b03      	ldr	r3, [pc, #12]	; (8000ee0 <HAL_GetTick+0x14>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	20000098 	.word	0x20000098

08000ee4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eec:	f7ff ffee 	bl	8000ecc <HAL_GetTick>
 8000ef0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000efc:	d005      	beq.n	8000f0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000efe:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <HAL_Delay+0x44>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	461a      	mov	r2, r3
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	4413      	add	r3, r2
 8000f08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f0a:	bf00      	nop
 8000f0c:	f7ff ffde 	bl	8000ecc <HAL_GetTick>
 8000f10:	4602      	mov	r2, r0
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	68fa      	ldr	r2, [r7, #12]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d8f7      	bhi.n	8000f0c <HAL_Delay+0x28>
  {
  }
}
 8000f1c:	bf00      	nop
 8000f1e:	bf00      	nop
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000010 	.word	0x20000010

08000f2c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f34:	2300      	movs	r3, #0
 8000f36:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d101      	bne.n	8000f42 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e033      	b.n	8000faa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d109      	bne.n	8000f5e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f7ff feae 	bl	8000cac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2200      	movs	r2, #0
 8000f54:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f62:	f003 0310 	and.w	r3, r3, #16
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d118      	bne.n	8000f9c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f72:	f023 0302 	bic.w	r3, r3, #2
 8000f76:	f043 0202 	orr.w	r2, r3, #2
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f000 fad8 	bl	8001534 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2200      	movs	r2, #0
 8000f88:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8e:	f023 0303 	bic.w	r3, r3, #3
 8000f92:	f043 0201 	orr.w	r2, r3, #1
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	641a      	str	r2, [r3, #64]	; 0x40
 8000f9a:	e001      	b.n	8000fa0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d101      	bne.n	8000fce <HAL_ADC_Start+0x1a>
 8000fca:	2302      	movs	r3, #2
 8000fcc:	e0b2      	b.n	8001134 <HAL_ADC_Start+0x180>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	f003 0301 	and.w	r3, r3, #1
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d018      	beq.n	8001016 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	689a      	ldr	r2, [r3, #8]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f042 0201 	orr.w	r2, r2, #1
 8000ff2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000ff4:	4b52      	ldr	r3, [pc, #328]	; (8001140 <HAL_ADC_Start+0x18c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a52      	ldr	r2, [pc, #328]	; (8001144 <HAL_ADC_Start+0x190>)
 8000ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8000ffe:	0c9a      	lsrs	r2, r3, #18
 8001000:	4613      	mov	r3, r2
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	4413      	add	r3, r2
 8001006:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001008:	e002      	b.n	8001010 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	3b01      	subs	r3, #1
 800100e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d1f9      	bne.n	800100a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	f003 0301 	and.w	r3, r3, #1
 8001020:	2b01      	cmp	r3, #1
 8001022:	d17a      	bne.n	800111a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001028:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800102c:	f023 0301 	bic.w	r3, r3, #1
 8001030:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001042:	2b00      	cmp	r3, #0
 8001044:	d007      	beq.n	8001056 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800104e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800105e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001062:	d106      	bne.n	8001072 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001068:	f023 0206 	bic.w	r2, r3, #6
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	645a      	str	r2, [r3, #68]	; 0x44
 8001070:	e002      	b.n	8001078 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2200      	movs	r2, #0
 8001076:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001080:	4b31      	ldr	r3, [pc, #196]	; (8001148 <HAL_ADC_Start+0x194>)
 8001082:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800108c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f003 031f 	and.w	r3, r3, #31
 8001096:	2b00      	cmp	r3, #0
 8001098:	d12a      	bne.n	80010f0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a2b      	ldr	r2, [pc, #172]	; (800114c <HAL_ADC_Start+0x198>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d015      	beq.n	80010d0 <HAL_ADC_Start+0x11c>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a29      	ldr	r2, [pc, #164]	; (8001150 <HAL_ADC_Start+0x19c>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d105      	bne.n	80010ba <HAL_ADC_Start+0x106>
 80010ae:	4b26      	ldr	r3, [pc, #152]	; (8001148 <HAL_ADC_Start+0x194>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f003 031f 	and.w	r3, r3, #31
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d00a      	beq.n	80010d0 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a25      	ldr	r2, [pc, #148]	; (8001154 <HAL_ADC_Start+0x1a0>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d136      	bne.n	8001132 <HAL_ADC_Start+0x17e>
 80010c4:	4b20      	ldr	r3, [pc, #128]	; (8001148 <HAL_ADC_Start+0x194>)
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f003 0310 	and.w	r3, r3, #16
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d130      	bne.n	8001132 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d129      	bne.n	8001132 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	689a      	ldr	r2, [r3, #8]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80010ec:	609a      	str	r2, [r3, #8]
 80010ee:	e020      	b.n	8001132 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a15      	ldr	r2, [pc, #84]	; (800114c <HAL_ADC_Start+0x198>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d11b      	bne.n	8001132 <HAL_ADC_Start+0x17e>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d114      	bne.n	8001132 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	689a      	ldr	r2, [r3, #8]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	e00b      	b.n	8001132 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111e:	f043 0210 	orr.w	r2, r3, #16
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112a:	f043 0201 	orr.w	r2, r3, #1
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001132:	2300      	movs	r3, #0
}
 8001134:	4618      	mov	r0, r3
 8001136:	3714      	adds	r7, #20
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	20000008 	.word	0x20000008
 8001144:	431bde83 	.word	0x431bde83
 8001148:	40012300 	.word	0x40012300
 800114c:	40012000 	.word	0x40012000
 8001150:	40012100 	.word	0x40012100
 8001154:	40012200 	.word	0x40012200

08001158 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001166:	2b01      	cmp	r3, #1
 8001168:	d101      	bne.n	800116e <HAL_ADC_Stop+0x16>
 800116a:	2302      	movs	r3, #2
 800116c:	e021      	b.n	80011b2 <HAL_ADC_Stop+0x5a>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2201      	movs	r2, #1
 8001172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	689a      	ldr	r2, [r3, #8]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f022 0201 	bic.w	r2, r2, #1
 8001184:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	f003 0301 	and.w	r3, r3, #1
 8001190:	2b00      	cmp	r3, #0
 8001192:	d109      	bne.n	80011a8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001198:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800119c:	f023 0301 	bic.w	r3, r3, #1
 80011a0:	f043 0201 	orr.w	r2, r3, #1
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2200      	movs	r2, #0
 80011ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b084      	sub	sp, #16
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
 80011c6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80011c8:	2300      	movs	r3, #0
 80011ca:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011da:	d113      	bne.n	8001204 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80011e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011ea:	d10b      	bne.n	8001204 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f0:	f043 0220 	orr.w	r2, r3, #32
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	e063      	b.n	80012cc <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001204:	f7ff fe62 	bl	8000ecc <HAL_GetTick>
 8001208:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800120a:	e021      	b.n	8001250 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001212:	d01d      	beq.n	8001250 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d007      	beq.n	800122a <HAL_ADC_PollForConversion+0x6c>
 800121a:	f7ff fe57 	bl	8000ecc <HAL_GetTick>
 800121e:	4602      	mov	r2, r0
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	683a      	ldr	r2, [r7, #0]
 8001226:	429a      	cmp	r2, r3
 8001228:	d212      	bcs.n	8001250 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 0302 	and.w	r3, r3, #2
 8001234:	2b02      	cmp	r3, #2
 8001236:	d00b      	beq.n	8001250 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123c:	f043 0204 	orr.w	r2, r3, #4
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2200      	movs	r2, #0
 8001248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800124c:	2303      	movs	r3, #3
 800124e:	e03d      	b.n	80012cc <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	2b02      	cmp	r3, #2
 800125c:	d1d6      	bne.n	800120c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f06f 0212 	mvn.w	r2, #18
 8001266:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d123      	bne.n	80012ca <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001286:	2b00      	cmp	r3, #0
 8001288:	d11f      	bne.n	80012ca <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001290:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001294:	2b00      	cmp	r3, #0
 8001296:	d006      	beq.n	80012a6 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d111      	bne.n	80012ca <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d105      	bne.n	80012ca <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	f043 0201 	orr.w	r2, r3, #1
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80012ca:	2300      	movs	r3, #0
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3710      	adds	r7, #16
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
	...

080012f0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80012fa:	2300      	movs	r3, #0
 80012fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001304:	2b01      	cmp	r3, #1
 8001306:	d101      	bne.n	800130c <HAL_ADC_ConfigChannel+0x1c>
 8001308:	2302      	movs	r3, #2
 800130a:	e105      	b.n	8001518 <HAL_ADC_ConfigChannel+0x228>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2201      	movs	r2, #1
 8001310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2b09      	cmp	r3, #9
 800131a:	d925      	bls.n	8001368 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	68d9      	ldr	r1, [r3, #12]
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	b29b      	uxth	r3, r3
 8001328:	461a      	mov	r2, r3
 800132a:	4613      	mov	r3, r2
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	4413      	add	r3, r2
 8001330:	3b1e      	subs	r3, #30
 8001332:	2207      	movs	r2, #7
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	43da      	mvns	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	400a      	ands	r2, r1
 8001340:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	68d9      	ldr	r1, [r3, #12]
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	689a      	ldr	r2, [r3, #8]
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	b29b      	uxth	r3, r3
 8001352:	4618      	mov	r0, r3
 8001354:	4603      	mov	r3, r0
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	4403      	add	r3, r0
 800135a:	3b1e      	subs	r3, #30
 800135c:	409a      	lsls	r2, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	430a      	orrs	r2, r1
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	e022      	b.n	80013ae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	6919      	ldr	r1, [r3, #16]
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	b29b      	uxth	r3, r3
 8001374:	461a      	mov	r2, r3
 8001376:	4613      	mov	r3, r2
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	4413      	add	r3, r2
 800137c:	2207      	movs	r2, #7
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43da      	mvns	r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	400a      	ands	r2, r1
 800138a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	6919      	ldr	r1, [r3, #16]
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	689a      	ldr	r2, [r3, #8]
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	b29b      	uxth	r3, r3
 800139c:	4618      	mov	r0, r3
 800139e:	4603      	mov	r3, r0
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	4403      	add	r3, r0
 80013a4:	409a      	lsls	r2, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	430a      	orrs	r2, r1
 80013ac:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	2b06      	cmp	r3, #6
 80013b4:	d824      	bhi.n	8001400 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685a      	ldr	r2, [r3, #4]
 80013c0:	4613      	mov	r3, r2
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	4413      	add	r3, r2
 80013c6:	3b05      	subs	r3, #5
 80013c8:	221f      	movs	r2, #31
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	43da      	mvns	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	400a      	ands	r2, r1
 80013d6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	4618      	mov	r0, r3
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685a      	ldr	r2, [r3, #4]
 80013ea:	4613      	mov	r3, r2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	4413      	add	r3, r2
 80013f0:	3b05      	subs	r3, #5
 80013f2:	fa00 f203 	lsl.w	r2, r0, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	430a      	orrs	r2, r1
 80013fc:	635a      	str	r2, [r3, #52]	; 0x34
 80013fe:	e04c      	b.n	800149a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	2b0c      	cmp	r3, #12
 8001406:	d824      	bhi.n	8001452 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685a      	ldr	r2, [r3, #4]
 8001412:	4613      	mov	r3, r2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4413      	add	r3, r2
 8001418:	3b23      	subs	r3, #35	; 0x23
 800141a:	221f      	movs	r2, #31
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	43da      	mvns	r2, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	400a      	ands	r2, r1
 8001428:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	b29b      	uxth	r3, r3
 8001436:	4618      	mov	r0, r3
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685a      	ldr	r2, [r3, #4]
 800143c:	4613      	mov	r3, r2
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	4413      	add	r3, r2
 8001442:	3b23      	subs	r3, #35	; 0x23
 8001444:	fa00 f203 	lsl.w	r2, r0, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	430a      	orrs	r2, r1
 800144e:	631a      	str	r2, [r3, #48]	; 0x30
 8001450:	e023      	b.n	800149a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685a      	ldr	r2, [r3, #4]
 800145c:	4613      	mov	r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	4413      	add	r3, r2
 8001462:	3b41      	subs	r3, #65	; 0x41
 8001464:	221f      	movs	r2, #31
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43da      	mvns	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	400a      	ands	r2, r1
 8001472:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	b29b      	uxth	r3, r3
 8001480:	4618      	mov	r0, r3
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685a      	ldr	r2, [r3, #4]
 8001486:	4613      	mov	r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	4413      	add	r3, r2
 800148c:	3b41      	subs	r3, #65	; 0x41
 800148e:	fa00 f203 	lsl.w	r2, r0, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	430a      	orrs	r2, r1
 8001498:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800149a:	4b22      	ldr	r3, [pc, #136]	; (8001524 <HAL_ADC_ConfigChannel+0x234>)
 800149c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a21      	ldr	r2, [pc, #132]	; (8001528 <HAL_ADC_ConfigChannel+0x238>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d109      	bne.n	80014bc <HAL_ADC_ConfigChannel+0x1cc>
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2b12      	cmp	r3, #18
 80014ae:	d105      	bne.n	80014bc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a19      	ldr	r2, [pc, #100]	; (8001528 <HAL_ADC_ConfigChannel+0x238>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d123      	bne.n	800150e <HAL_ADC_ConfigChannel+0x21e>
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2b10      	cmp	r3, #16
 80014cc:	d003      	beq.n	80014d6 <HAL_ADC_ConfigChannel+0x1e6>
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2b11      	cmp	r3, #17
 80014d4:	d11b      	bne.n	800150e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2b10      	cmp	r3, #16
 80014e8:	d111      	bne.n	800150e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014ea:	4b10      	ldr	r3, [pc, #64]	; (800152c <HAL_ADC_ConfigChannel+0x23c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a10      	ldr	r2, [pc, #64]	; (8001530 <HAL_ADC_ConfigChannel+0x240>)
 80014f0:	fba2 2303 	umull	r2, r3, r2, r3
 80014f4:	0c9a      	lsrs	r2, r3, #18
 80014f6:	4613      	mov	r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	4413      	add	r3, r2
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001500:	e002      	b.n	8001508 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	3b01      	subs	r3, #1
 8001506:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1f9      	bne.n	8001502 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001516:	2300      	movs	r3, #0
}
 8001518:	4618      	mov	r0, r3
 800151a:	3714      	adds	r7, #20
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	40012300 	.word	0x40012300
 8001528:	40012000 	.word	0x40012000
 800152c:	20000008 	.word	0x20000008
 8001530:	431bde83 	.word	0x431bde83

08001534 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800153c:	4b79      	ldr	r3, [pc, #484]	; (8001724 <ADC_Init+0x1f0>)
 800153e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	685a      	ldr	r2, [r3, #4]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	431a      	orrs	r2, r3
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	685a      	ldr	r2, [r3, #4]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001568:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	6859      	ldr	r1, [r3, #4]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	691b      	ldr	r3, [r3, #16]
 8001574:	021a      	lsls	r2, r3, #8
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	430a      	orrs	r2, r1
 800157c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	685a      	ldr	r2, [r3, #4]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800158c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	6859      	ldr	r1, [r3, #4]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689a      	ldr	r2, [r3, #8]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	430a      	orrs	r2, r1
 800159e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	689a      	ldr	r2, [r3, #8]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6899      	ldr	r1, [r3, #8]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	68da      	ldr	r2, [r3, #12]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	430a      	orrs	r2, r1
 80015c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c6:	4a58      	ldr	r2, [pc, #352]	; (8001728 <ADC_Init+0x1f4>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d022      	beq.n	8001612 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	689a      	ldr	r2, [r3, #8]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	6899      	ldr	r1, [r3, #8]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	430a      	orrs	r2, r1
 80015ec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	689a      	ldr	r2, [r3, #8]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	6899      	ldr	r1, [r3, #8]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	430a      	orrs	r2, r1
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	e00f      	b.n	8001632 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	689a      	ldr	r2, [r3, #8]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001620:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	689a      	ldr	r2, [r3, #8]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001630:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	689a      	ldr	r2, [r3, #8]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f022 0202 	bic.w	r2, r2, #2
 8001640:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	6899      	ldr	r1, [r3, #8]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	7e1b      	ldrb	r3, [r3, #24]
 800164c:	005a      	lsls	r2, r3, #1
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	430a      	orrs	r2, r1
 8001654:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f893 3020 	ldrb.w	r3, [r3, #32]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d01b      	beq.n	8001698 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	685a      	ldr	r2, [r3, #4]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800166e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	685a      	ldr	r2, [r3, #4]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800167e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	6859      	ldr	r1, [r3, #4]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168a:	3b01      	subs	r3, #1
 800168c:	035a      	lsls	r2, r3, #13
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	430a      	orrs	r2, r1
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	e007      	b.n	80016a8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	685a      	ldr	r2, [r3, #4]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016a6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80016b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	3b01      	subs	r3, #1
 80016c4:	051a      	lsls	r2, r3, #20
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	430a      	orrs	r2, r1
 80016cc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	689a      	ldr	r2, [r3, #8]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80016dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	6899      	ldr	r1, [r3, #8]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016ea:	025a      	lsls	r2, r3, #9
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	430a      	orrs	r2, r1
 80016f2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	689a      	ldr	r2, [r3, #8]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001702:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6899      	ldr	r1, [r3, #8]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	695b      	ldr	r3, [r3, #20]
 800170e:	029a      	lsls	r2, r3, #10
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	430a      	orrs	r2, r1
 8001716:	609a      	str	r2, [r3, #8]
}
 8001718:	bf00      	nop
 800171a:	3714      	adds	r7, #20
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	40012300 	.word	0x40012300
 8001728:	0f000001 	.word	0x0f000001

0800172c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f003 0307 	and.w	r3, r3, #7
 800173a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800173c:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <__NVIC_SetPriorityGrouping+0x44>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001742:	68ba      	ldr	r2, [r7, #8]
 8001744:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001748:	4013      	ands	r3, r2
 800174a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001754:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800175c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800175e:	4a04      	ldr	r2, [pc, #16]	; (8001770 <__NVIC_SetPriorityGrouping+0x44>)
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	60d3      	str	r3, [r2, #12]
}
 8001764:	bf00      	nop
 8001766:	3714      	adds	r7, #20
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001778:	4b04      	ldr	r3, [pc, #16]	; (800178c <__NVIC_GetPriorityGrouping+0x18>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	0a1b      	lsrs	r3, r3, #8
 800177e:	f003 0307 	and.w	r3, r3, #7
}
 8001782:	4618      	mov	r0, r3
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	e000ed00 	.word	0xe000ed00

08001790 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	6039      	str	r1, [r7, #0]
 800179a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800179c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	db0a      	blt.n	80017ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	490c      	ldr	r1, [pc, #48]	; (80017dc <__NVIC_SetPriority+0x4c>)
 80017aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ae:	0112      	lsls	r2, r2, #4
 80017b0:	b2d2      	uxtb	r2, r2
 80017b2:	440b      	add	r3, r1
 80017b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017b8:	e00a      	b.n	80017d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	4908      	ldr	r1, [pc, #32]	; (80017e0 <__NVIC_SetPriority+0x50>)
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	f003 030f 	and.w	r3, r3, #15
 80017c6:	3b04      	subs	r3, #4
 80017c8:	0112      	lsls	r2, r2, #4
 80017ca:	b2d2      	uxtb	r2, r2
 80017cc:	440b      	add	r3, r1
 80017ce:	761a      	strb	r2, [r3, #24]
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	e000e100 	.word	0xe000e100
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b089      	sub	sp, #36	; 0x24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	f1c3 0307 	rsb	r3, r3, #7
 80017fe:	2b04      	cmp	r3, #4
 8001800:	bf28      	it	cs
 8001802:	2304      	movcs	r3, #4
 8001804:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	3304      	adds	r3, #4
 800180a:	2b06      	cmp	r3, #6
 800180c:	d902      	bls.n	8001814 <NVIC_EncodePriority+0x30>
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	3b03      	subs	r3, #3
 8001812:	e000      	b.n	8001816 <NVIC_EncodePriority+0x32>
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001818:	f04f 32ff 	mov.w	r2, #4294967295
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	43da      	mvns	r2, r3
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	401a      	ands	r2, r3
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800182c:	f04f 31ff 	mov.w	r1, #4294967295
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	fa01 f303 	lsl.w	r3, r1, r3
 8001836:	43d9      	mvns	r1, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800183c:	4313      	orrs	r3, r2
         );
}
 800183e:	4618      	mov	r0, r3
 8001840:	3724      	adds	r7, #36	; 0x24
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
	...

0800184c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3b01      	subs	r3, #1
 8001858:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800185c:	d301      	bcc.n	8001862 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800185e:	2301      	movs	r3, #1
 8001860:	e00f      	b.n	8001882 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001862:	4a0a      	ldr	r2, [pc, #40]	; (800188c <SysTick_Config+0x40>)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3b01      	subs	r3, #1
 8001868:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800186a:	210f      	movs	r1, #15
 800186c:	f04f 30ff 	mov.w	r0, #4294967295
 8001870:	f7ff ff8e 	bl	8001790 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001874:	4b05      	ldr	r3, [pc, #20]	; (800188c <SysTick_Config+0x40>)
 8001876:	2200      	movs	r2, #0
 8001878:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800187a:	4b04      	ldr	r3, [pc, #16]	; (800188c <SysTick_Config+0x40>)
 800187c:	2207      	movs	r2, #7
 800187e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	e000e010 	.word	0xe000e010

08001890 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f7ff ff47 	bl	800172c <__NVIC_SetPriorityGrouping>
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b086      	sub	sp, #24
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	4603      	mov	r3, r0
 80018ae:	60b9      	str	r1, [r7, #8]
 80018b0:	607a      	str	r2, [r7, #4]
 80018b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018b8:	f7ff ff5c 	bl	8001774 <__NVIC_GetPriorityGrouping>
 80018bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	68b9      	ldr	r1, [r7, #8]
 80018c2:	6978      	ldr	r0, [r7, #20]
 80018c4:	f7ff ff8e 	bl	80017e4 <NVIC_EncodePriority>
 80018c8:	4602      	mov	r2, r0
 80018ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ce:	4611      	mov	r1, r2
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff ff5d 	bl	8001790 <__NVIC_SetPriority>
}
 80018d6:	bf00      	nop
 80018d8:	3718      	adds	r7, #24
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b082      	sub	sp, #8
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f7ff ffb0 	bl	800184c <SysTick_Config>
 80018ec:	4603      	mov	r3, r0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
	...

080018f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b089      	sub	sp, #36	; 0x24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001902:	2300      	movs	r3, #0
 8001904:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001906:	2300      	movs	r3, #0
 8001908:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800190a:	2300      	movs	r3, #0
 800190c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800190e:	2300      	movs	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]
 8001912:	e16b      	b.n	8001bec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001914:	2201      	movs	r2, #1
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	697a      	ldr	r2, [r7, #20]
 8001924:	4013      	ands	r3, r2
 8001926:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	429a      	cmp	r2, r3
 800192e:	f040 815a 	bne.w	8001be6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f003 0303 	and.w	r3, r3, #3
 800193a:	2b01      	cmp	r3, #1
 800193c:	d005      	beq.n	800194a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001946:	2b02      	cmp	r3, #2
 8001948:	d130      	bne.n	80019ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	2203      	movs	r2, #3
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	43db      	mvns	r3, r3
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	4013      	ands	r3, r2
 8001960:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	68da      	ldr	r2, [r3, #12]
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	4313      	orrs	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001980:	2201      	movs	r2, #1
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	43db      	mvns	r3, r3
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4013      	ands	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	091b      	lsrs	r3, r3, #4
 8001996:	f003 0201 	and.w	r2, r3, #1
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f003 0303 	and.w	r3, r3, #3
 80019b4:	2b03      	cmp	r3, #3
 80019b6:	d017      	beq.n	80019e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	2203      	movs	r2, #3
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	43db      	mvns	r3, r3
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4013      	ands	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	689a      	ldr	r2, [r3, #8]
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4313      	orrs	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f003 0303 	and.w	r3, r3, #3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d123      	bne.n	8001a3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	08da      	lsrs	r2, r3, #3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	3208      	adds	r2, #8
 80019fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	f003 0307 	and.w	r3, r3, #7
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	220f      	movs	r2, #15
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	43db      	mvns	r3, r3
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	4013      	ands	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	691a      	ldr	r2, [r3, #16]
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	08da      	lsrs	r2, r3, #3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	3208      	adds	r2, #8
 8001a36:	69b9      	ldr	r1, [r7, #24]
 8001a38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	2203      	movs	r2, #3
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4013      	ands	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f003 0203 	and.w	r2, r3, #3
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	f000 80b4 	beq.w	8001be6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	4b60      	ldr	r3, [pc, #384]	; (8001c04 <HAL_GPIO_Init+0x30c>)
 8001a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a86:	4a5f      	ldr	r2, [pc, #380]	; (8001c04 <HAL_GPIO_Init+0x30c>)
 8001a88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a8e:	4b5d      	ldr	r3, [pc, #372]	; (8001c04 <HAL_GPIO_Init+0x30c>)
 8001a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a9a:	4a5b      	ldr	r2, [pc, #364]	; (8001c08 <HAL_GPIO_Init+0x310>)
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	089b      	lsrs	r3, r3, #2
 8001aa0:	3302      	adds	r3, #2
 8001aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	f003 0303 	and.w	r3, r3, #3
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	220f      	movs	r2, #15
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	4013      	ands	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a52      	ldr	r2, [pc, #328]	; (8001c0c <HAL_GPIO_Init+0x314>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d02b      	beq.n	8001b1e <HAL_GPIO_Init+0x226>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a51      	ldr	r2, [pc, #324]	; (8001c10 <HAL_GPIO_Init+0x318>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d025      	beq.n	8001b1a <HAL_GPIO_Init+0x222>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a50      	ldr	r2, [pc, #320]	; (8001c14 <HAL_GPIO_Init+0x31c>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d01f      	beq.n	8001b16 <HAL_GPIO_Init+0x21e>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a4f      	ldr	r2, [pc, #316]	; (8001c18 <HAL_GPIO_Init+0x320>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d019      	beq.n	8001b12 <HAL_GPIO_Init+0x21a>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a4e      	ldr	r2, [pc, #312]	; (8001c1c <HAL_GPIO_Init+0x324>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d013      	beq.n	8001b0e <HAL_GPIO_Init+0x216>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a4d      	ldr	r2, [pc, #308]	; (8001c20 <HAL_GPIO_Init+0x328>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d00d      	beq.n	8001b0a <HAL_GPIO_Init+0x212>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a4c      	ldr	r2, [pc, #304]	; (8001c24 <HAL_GPIO_Init+0x32c>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d007      	beq.n	8001b06 <HAL_GPIO_Init+0x20e>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a4b      	ldr	r2, [pc, #300]	; (8001c28 <HAL_GPIO_Init+0x330>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d101      	bne.n	8001b02 <HAL_GPIO_Init+0x20a>
 8001afe:	2307      	movs	r3, #7
 8001b00:	e00e      	b.n	8001b20 <HAL_GPIO_Init+0x228>
 8001b02:	2308      	movs	r3, #8
 8001b04:	e00c      	b.n	8001b20 <HAL_GPIO_Init+0x228>
 8001b06:	2306      	movs	r3, #6
 8001b08:	e00a      	b.n	8001b20 <HAL_GPIO_Init+0x228>
 8001b0a:	2305      	movs	r3, #5
 8001b0c:	e008      	b.n	8001b20 <HAL_GPIO_Init+0x228>
 8001b0e:	2304      	movs	r3, #4
 8001b10:	e006      	b.n	8001b20 <HAL_GPIO_Init+0x228>
 8001b12:	2303      	movs	r3, #3
 8001b14:	e004      	b.n	8001b20 <HAL_GPIO_Init+0x228>
 8001b16:	2302      	movs	r3, #2
 8001b18:	e002      	b.n	8001b20 <HAL_GPIO_Init+0x228>
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e000      	b.n	8001b20 <HAL_GPIO_Init+0x228>
 8001b1e:	2300      	movs	r3, #0
 8001b20:	69fa      	ldr	r2, [r7, #28]
 8001b22:	f002 0203 	and.w	r2, r2, #3
 8001b26:	0092      	lsls	r2, r2, #2
 8001b28:	4093      	lsls	r3, r2
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b30:	4935      	ldr	r1, [pc, #212]	; (8001c08 <HAL_GPIO_Init+0x310>)
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	089b      	lsrs	r3, r3, #2
 8001b36:	3302      	adds	r3, #2
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b3e:	4b3b      	ldr	r3, [pc, #236]	; (8001c2c <HAL_GPIO_Init+0x334>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	43db      	mvns	r3, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b62:	4a32      	ldr	r2, [pc, #200]	; (8001c2c <HAL_GPIO_Init+0x334>)
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b68:	4b30      	ldr	r3, [pc, #192]	; (8001c2c <HAL_GPIO_Init+0x334>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	43db      	mvns	r3, r3
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	4013      	ands	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d003      	beq.n	8001b8c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b8c:	4a27      	ldr	r2, [pc, #156]	; (8001c2c <HAL_GPIO_Init+0x334>)
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b92:	4b26      	ldr	r3, [pc, #152]	; (8001c2c <HAL_GPIO_Init+0x334>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bb6:	4a1d      	ldr	r2, [pc, #116]	; (8001c2c <HAL_GPIO_Init+0x334>)
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bbc:	4b1b      	ldr	r3, [pc, #108]	; (8001c2c <HAL_GPIO_Init+0x334>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d003      	beq.n	8001be0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001be0:	4a12      	ldr	r2, [pc, #72]	; (8001c2c <HAL_GPIO_Init+0x334>)
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	3301      	adds	r3, #1
 8001bea:	61fb      	str	r3, [r7, #28]
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	2b0f      	cmp	r3, #15
 8001bf0:	f67f ae90 	bls.w	8001914 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bf4:	bf00      	nop
 8001bf6:	bf00      	nop
 8001bf8:	3724      	adds	r7, #36	; 0x24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	40023800 	.word	0x40023800
 8001c08:	40013800 	.word	0x40013800
 8001c0c:	40020000 	.word	0x40020000
 8001c10:	40020400 	.word	0x40020400
 8001c14:	40020800 	.word	0x40020800
 8001c18:	40020c00 	.word	0x40020c00
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	40021400 	.word	0x40021400
 8001c24:	40021800 	.word	0x40021800
 8001c28:	40021c00 	.word	0x40021c00
 8001c2c:	40013c00 	.word	0x40013c00

08001c30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	691a      	ldr	r2, [r3, #16]
 8001c40:	887b      	ldrh	r3, [r7, #2]
 8001c42:	4013      	ands	r3, r2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d002      	beq.n	8001c4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	73fb      	strb	r3, [r7, #15]
 8001c4c:	e001      	b.n	8001c52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3714      	adds	r7, #20
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	460b      	mov	r3, r1
 8001c6a:	807b      	strh	r3, [r7, #2]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c70:	787b      	ldrb	r3, [r7, #1]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d003      	beq.n	8001c7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c76:	887a      	ldrh	r2, [r7, #2]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c7c:	e003      	b.n	8001c86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c7e:	887b      	ldrh	r3, [r7, #2]
 8001c80:	041a      	lsls	r2, r3, #16
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	619a      	str	r2, [r3, #24]
}
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
	...

08001c94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e267      	b.n	8002176 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d075      	beq.n	8001d9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001cb2:	4b88      	ldr	r3, [pc, #544]	; (8001ed4 <HAL_RCC_OscConfig+0x240>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f003 030c 	and.w	r3, r3, #12
 8001cba:	2b04      	cmp	r3, #4
 8001cbc:	d00c      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cbe:	4b85      	ldr	r3, [pc, #532]	; (8001ed4 <HAL_RCC_OscConfig+0x240>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001cc6:	2b08      	cmp	r3, #8
 8001cc8:	d112      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cca:	4b82      	ldr	r3, [pc, #520]	; (8001ed4 <HAL_RCC_OscConfig+0x240>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cd6:	d10b      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd8:	4b7e      	ldr	r3, [pc, #504]	; (8001ed4 <HAL_RCC_OscConfig+0x240>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d05b      	beq.n	8001d9c <HAL_RCC_OscConfig+0x108>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d157      	bne.n	8001d9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e242      	b.n	8002176 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cf8:	d106      	bne.n	8001d08 <HAL_RCC_OscConfig+0x74>
 8001cfa:	4b76      	ldr	r3, [pc, #472]	; (8001ed4 <HAL_RCC_OscConfig+0x240>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a75      	ldr	r2, [pc, #468]	; (8001ed4 <HAL_RCC_OscConfig+0x240>)
 8001d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d04:	6013      	str	r3, [r2, #0]
 8001d06:	e01d      	b.n	8001d44 <HAL_RCC_OscConfig+0xb0>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d10:	d10c      	bne.n	8001d2c <HAL_RCC_OscConfig+0x98>
 8001d12:	4b70      	ldr	r3, [pc, #448]	; (8001ed4 <HAL_RCC_OscConfig+0x240>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a6f      	ldr	r2, [pc, #444]	; (8001ed4 <HAL_RCC_OscConfig+0x240>)
 8001d18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d1c:	6013      	str	r3, [r2, #0]
 8001d1e:	4b6d      	ldr	r3, [pc, #436]	; (8001ed4 <HAL_RCC_OscConfig+0x240>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a6c      	ldr	r2, [pc, #432]	; (8001ed4 <HAL_RCC_OscConfig+0x240>)
 8001d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d28:	6013      	str	r3, [r2, #0]
 8001d2a:	e00b      	b.n	8001d44 <HAL_RCC_OscConfig+0xb0>
 8001d2c:	4b69      	ldr	r3, [pc, #420]	; (8001ed4 <HAL_RCC_OscConfig+0x240>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a68      	ldr	r2, [pc, #416]	; (8001ed4 <HAL_RCC_OscConfig+0x240>)
 8001d32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d36:	6013      	str	r3, [r2, #0]
 8001d38:	4b66      	ldr	r3, [pc, #408]	; (8001ed4 <HAL_RCC_OscConfig+0x240>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a65      	ldr	r2, [pc, #404]	; (8001ed4 <HAL_RCC_OscConfig+0x240>)
 8001d3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d013      	beq.n	8001d74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4c:	f7ff f8be 	bl	8000ecc <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d52:	e008      	b.n	8001d66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d54:	f7ff f8ba 	bl	8000ecc <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b64      	cmp	r3, #100	; 0x64
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e207      	b.n	8002176 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d66:	4b5b      	ldr	r3, [pc, #364]	; (8001ed4 <HAL_RCC_OscConfig+0x240>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d0f0      	beq.n	8001d54 <HAL_RCC_OscConfig+0xc0>
 8001d72:	e014      	b.n	8001d9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d74:	f7ff f8aa 	bl	8000ecc <HAL_GetTick>
 8001d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d7a:	e008      	b.n	8001d8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d7c:	f7ff f8a6 	bl	8000ecc <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b64      	cmp	r3, #100	; 0x64
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e1f3      	b.n	8002176 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d8e:	4b51      	ldr	r3, [pc, #324]	; (8001ed4 <HAL_RCC_OscConfig+0x240>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1f0      	bne.n	8001d7c <HAL_RCC_OscConfig+0xe8>
 8001d9a:	e000      	b.n	8001d9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d063      	beq.n	8001e72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001daa:	4b4a      	ldr	r3, [pc, #296]	; (8001ed4 <HAL_RCC_OscConfig+0x240>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f003 030c 	and.w	r3, r3, #12
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00b      	beq.n	8001dce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001db6:	4b47      	ldr	r3, [pc, #284]	; (8001ed4 <HAL_RCC_OscConfig+0x240>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001dbe:	2b08      	cmp	r3, #8
 8001dc0:	d11c      	bne.n	8001dfc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dc2:	4b44      	ldr	r3, [pc, #272]	; (8001ed4 <HAL_RCC_OscConfig+0x240>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d116      	bne.n	8001dfc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dce:	4b41      	ldr	r3, [pc, #260]	; (8001ed4 <HAL_RCC_OscConfig+0x240>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d005      	beq.n	8001de6 <HAL_RCC_OscConfig+0x152>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d001      	beq.n	8001de6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e1c7      	b.n	8002176 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de6:	4b3b      	ldr	r3, [pc, #236]	; (8001ed4 <HAL_RCC_OscConfig+0x240>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	4937      	ldr	r1, [pc, #220]	; (8001ed4 <HAL_RCC_OscConfig+0x240>)
 8001df6:	4313      	orrs	r3, r2
 8001df8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dfa:	e03a      	b.n	8001e72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d020      	beq.n	8001e46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e04:	4b34      	ldr	r3, [pc, #208]	; (8001ed8 <HAL_RCC_OscConfig+0x244>)
 8001e06:	2201      	movs	r2, #1
 8001e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0a:	f7ff f85f 	bl	8000ecc <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e10:	e008      	b.n	8001e24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e12:	f7ff f85b 	bl	8000ecc <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e1a8      	b.n	8002176 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e24:	4b2b      	ldr	r3, [pc, #172]	; (8001ed4 <HAL_RCC_OscConfig+0x240>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d0f0      	beq.n	8001e12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e30:	4b28      	ldr	r3, [pc, #160]	; (8001ed4 <HAL_RCC_OscConfig+0x240>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	691b      	ldr	r3, [r3, #16]
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	4925      	ldr	r1, [pc, #148]	; (8001ed4 <HAL_RCC_OscConfig+0x240>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	600b      	str	r3, [r1, #0]
 8001e44:	e015      	b.n	8001e72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e46:	4b24      	ldr	r3, [pc, #144]	; (8001ed8 <HAL_RCC_OscConfig+0x244>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4c:	f7ff f83e 	bl	8000ecc <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e54:	f7ff f83a 	bl	8000ecc <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e187      	b.n	8002176 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e66:	4b1b      	ldr	r3, [pc, #108]	; (8001ed4 <HAL_RCC_OscConfig+0x240>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1f0      	bne.n	8001e54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0308 	and.w	r3, r3, #8
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d036      	beq.n	8001eec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d016      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e86:	4b15      	ldr	r3, [pc, #84]	; (8001edc <HAL_RCC_OscConfig+0x248>)
 8001e88:	2201      	movs	r2, #1
 8001e8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e8c:	f7ff f81e 	bl	8000ecc <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e94:	f7ff f81a 	bl	8000ecc <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e167      	b.n	8002176 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ea6:	4b0b      	ldr	r3, [pc, #44]	; (8001ed4 <HAL_RCC_OscConfig+0x240>)
 8001ea8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d0f0      	beq.n	8001e94 <HAL_RCC_OscConfig+0x200>
 8001eb2:	e01b      	b.n	8001eec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eb4:	4b09      	ldr	r3, [pc, #36]	; (8001edc <HAL_RCC_OscConfig+0x248>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eba:	f7ff f807 	bl	8000ecc <HAL_GetTick>
 8001ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ec0:	e00e      	b.n	8001ee0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ec2:	f7ff f803 	bl	8000ecc <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d907      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e150      	b.n	8002176 <HAL_RCC_OscConfig+0x4e2>
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	42470000 	.word	0x42470000
 8001edc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ee0:	4b88      	ldr	r3, [pc, #544]	; (8002104 <HAL_RCC_OscConfig+0x470>)
 8001ee2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1ea      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0304 	and.w	r3, r3, #4
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	f000 8097 	beq.w	8002028 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001efa:	2300      	movs	r3, #0
 8001efc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001efe:	4b81      	ldr	r3, [pc, #516]	; (8002104 <HAL_RCC_OscConfig+0x470>)
 8001f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d10f      	bne.n	8001f2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60bb      	str	r3, [r7, #8]
 8001f0e:	4b7d      	ldr	r3, [pc, #500]	; (8002104 <HAL_RCC_OscConfig+0x470>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	4a7c      	ldr	r2, [pc, #496]	; (8002104 <HAL_RCC_OscConfig+0x470>)
 8001f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f18:	6413      	str	r3, [r2, #64]	; 0x40
 8001f1a:	4b7a      	ldr	r3, [pc, #488]	; (8002104 <HAL_RCC_OscConfig+0x470>)
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f22:	60bb      	str	r3, [r7, #8]
 8001f24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f26:	2301      	movs	r3, #1
 8001f28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f2a:	4b77      	ldr	r3, [pc, #476]	; (8002108 <HAL_RCC_OscConfig+0x474>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d118      	bne.n	8001f68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f36:	4b74      	ldr	r3, [pc, #464]	; (8002108 <HAL_RCC_OscConfig+0x474>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a73      	ldr	r2, [pc, #460]	; (8002108 <HAL_RCC_OscConfig+0x474>)
 8001f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f42:	f7fe ffc3 	bl	8000ecc <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f48:	e008      	b.n	8001f5c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f4a:	f7fe ffbf 	bl	8000ecc <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e10c      	b.n	8002176 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f5c:	4b6a      	ldr	r3, [pc, #424]	; (8002108 <HAL_RCC_OscConfig+0x474>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d0f0      	beq.n	8001f4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d106      	bne.n	8001f7e <HAL_RCC_OscConfig+0x2ea>
 8001f70:	4b64      	ldr	r3, [pc, #400]	; (8002104 <HAL_RCC_OscConfig+0x470>)
 8001f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f74:	4a63      	ldr	r2, [pc, #396]	; (8002104 <HAL_RCC_OscConfig+0x470>)
 8001f76:	f043 0301 	orr.w	r3, r3, #1
 8001f7a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f7c:	e01c      	b.n	8001fb8 <HAL_RCC_OscConfig+0x324>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	2b05      	cmp	r3, #5
 8001f84:	d10c      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x30c>
 8001f86:	4b5f      	ldr	r3, [pc, #380]	; (8002104 <HAL_RCC_OscConfig+0x470>)
 8001f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f8a:	4a5e      	ldr	r2, [pc, #376]	; (8002104 <HAL_RCC_OscConfig+0x470>)
 8001f8c:	f043 0304 	orr.w	r3, r3, #4
 8001f90:	6713      	str	r3, [r2, #112]	; 0x70
 8001f92:	4b5c      	ldr	r3, [pc, #368]	; (8002104 <HAL_RCC_OscConfig+0x470>)
 8001f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f96:	4a5b      	ldr	r2, [pc, #364]	; (8002104 <HAL_RCC_OscConfig+0x470>)
 8001f98:	f043 0301 	orr.w	r3, r3, #1
 8001f9c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f9e:	e00b      	b.n	8001fb8 <HAL_RCC_OscConfig+0x324>
 8001fa0:	4b58      	ldr	r3, [pc, #352]	; (8002104 <HAL_RCC_OscConfig+0x470>)
 8001fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa4:	4a57      	ldr	r2, [pc, #348]	; (8002104 <HAL_RCC_OscConfig+0x470>)
 8001fa6:	f023 0301 	bic.w	r3, r3, #1
 8001faa:	6713      	str	r3, [r2, #112]	; 0x70
 8001fac:	4b55      	ldr	r3, [pc, #340]	; (8002104 <HAL_RCC_OscConfig+0x470>)
 8001fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb0:	4a54      	ldr	r2, [pc, #336]	; (8002104 <HAL_RCC_OscConfig+0x470>)
 8001fb2:	f023 0304 	bic.w	r3, r3, #4
 8001fb6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d015      	beq.n	8001fec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc0:	f7fe ff84 	bl	8000ecc <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fc6:	e00a      	b.n	8001fde <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fc8:	f7fe ff80 	bl	8000ecc <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e0cb      	b.n	8002176 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fde:	4b49      	ldr	r3, [pc, #292]	; (8002104 <HAL_RCC_OscConfig+0x470>)
 8001fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d0ee      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x334>
 8001fea:	e014      	b.n	8002016 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fec:	f7fe ff6e 	bl	8000ecc <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ff2:	e00a      	b.n	800200a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ff4:	f7fe ff6a 	bl	8000ecc <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002002:	4293      	cmp	r3, r2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e0b5      	b.n	8002176 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800200a:	4b3e      	ldr	r3, [pc, #248]	; (8002104 <HAL_RCC_OscConfig+0x470>)
 800200c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1ee      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002016:	7dfb      	ldrb	r3, [r7, #23]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d105      	bne.n	8002028 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800201c:	4b39      	ldr	r3, [pc, #228]	; (8002104 <HAL_RCC_OscConfig+0x470>)
 800201e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002020:	4a38      	ldr	r2, [pc, #224]	; (8002104 <HAL_RCC_OscConfig+0x470>)
 8002022:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002026:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	2b00      	cmp	r3, #0
 800202e:	f000 80a1 	beq.w	8002174 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002032:	4b34      	ldr	r3, [pc, #208]	; (8002104 <HAL_RCC_OscConfig+0x470>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f003 030c 	and.w	r3, r3, #12
 800203a:	2b08      	cmp	r3, #8
 800203c:	d05c      	beq.n	80020f8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	2b02      	cmp	r3, #2
 8002044:	d141      	bne.n	80020ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002046:	4b31      	ldr	r3, [pc, #196]	; (800210c <HAL_RCC_OscConfig+0x478>)
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204c:	f7fe ff3e 	bl	8000ecc <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002054:	f7fe ff3a 	bl	8000ecc <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e087      	b.n	8002176 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002066:	4b27      	ldr	r3, [pc, #156]	; (8002104 <HAL_RCC_OscConfig+0x470>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1f0      	bne.n	8002054 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	69da      	ldr	r2, [r3, #28]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a1b      	ldr	r3, [r3, #32]
 800207a:	431a      	orrs	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002080:	019b      	lsls	r3, r3, #6
 8002082:	431a      	orrs	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002088:	085b      	lsrs	r3, r3, #1
 800208a:	3b01      	subs	r3, #1
 800208c:	041b      	lsls	r3, r3, #16
 800208e:	431a      	orrs	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002094:	061b      	lsls	r3, r3, #24
 8002096:	491b      	ldr	r1, [pc, #108]	; (8002104 <HAL_RCC_OscConfig+0x470>)
 8002098:	4313      	orrs	r3, r2
 800209a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800209c:	4b1b      	ldr	r3, [pc, #108]	; (800210c <HAL_RCC_OscConfig+0x478>)
 800209e:	2201      	movs	r2, #1
 80020a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a2:	f7fe ff13 	bl	8000ecc <HAL_GetTick>
 80020a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020a8:	e008      	b.n	80020bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020aa:	f7fe ff0f 	bl	8000ecc <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e05c      	b.n	8002176 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020bc:	4b11      	ldr	r3, [pc, #68]	; (8002104 <HAL_RCC_OscConfig+0x470>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d0f0      	beq.n	80020aa <HAL_RCC_OscConfig+0x416>
 80020c8:	e054      	b.n	8002174 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ca:	4b10      	ldr	r3, [pc, #64]	; (800210c <HAL_RCC_OscConfig+0x478>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d0:	f7fe fefc 	bl	8000ecc <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020d8:	f7fe fef8 	bl	8000ecc <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e045      	b.n	8002176 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ea:	4b06      	ldr	r3, [pc, #24]	; (8002104 <HAL_RCC_OscConfig+0x470>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1f0      	bne.n	80020d8 <HAL_RCC_OscConfig+0x444>
 80020f6:	e03d      	b.n	8002174 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d107      	bne.n	8002110 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e038      	b.n	8002176 <HAL_RCC_OscConfig+0x4e2>
 8002104:	40023800 	.word	0x40023800
 8002108:	40007000 	.word	0x40007000
 800210c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002110:	4b1b      	ldr	r3, [pc, #108]	; (8002180 <HAL_RCC_OscConfig+0x4ec>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d028      	beq.n	8002170 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002128:	429a      	cmp	r2, r3
 800212a:	d121      	bne.n	8002170 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002136:	429a      	cmp	r2, r3
 8002138:	d11a      	bne.n	8002170 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002140:	4013      	ands	r3, r2
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002146:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002148:	4293      	cmp	r3, r2
 800214a:	d111      	bne.n	8002170 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002156:	085b      	lsrs	r3, r3, #1
 8002158:	3b01      	subs	r3, #1
 800215a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800215c:	429a      	cmp	r2, r3
 800215e:	d107      	bne.n	8002170 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800216a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800216c:	429a      	cmp	r2, r3
 800216e:	d001      	beq.n	8002174 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e000      	b.n	8002176 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3718      	adds	r7, #24
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	40023800 	.word	0x40023800

08002184 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d101      	bne.n	8002198 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e0cc      	b.n	8002332 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002198:	4b68      	ldr	r3, [pc, #416]	; (800233c <HAL_RCC_ClockConfig+0x1b8>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0307 	and.w	r3, r3, #7
 80021a0:	683a      	ldr	r2, [r7, #0]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d90c      	bls.n	80021c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021a6:	4b65      	ldr	r3, [pc, #404]	; (800233c <HAL_RCC_ClockConfig+0x1b8>)
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	b2d2      	uxtb	r2, r2
 80021ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ae:	4b63      	ldr	r3, [pc, #396]	; (800233c <HAL_RCC_ClockConfig+0x1b8>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d001      	beq.n	80021c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e0b8      	b.n	8002332 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d020      	beq.n	800220e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0304 	and.w	r3, r3, #4
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d005      	beq.n	80021e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021d8:	4b59      	ldr	r3, [pc, #356]	; (8002340 <HAL_RCC_ClockConfig+0x1bc>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	4a58      	ldr	r2, [pc, #352]	; (8002340 <HAL_RCC_ClockConfig+0x1bc>)
 80021de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80021e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0308 	and.w	r3, r3, #8
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d005      	beq.n	80021fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021f0:	4b53      	ldr	r3, [pc, #332]	; (8002340 <HAL_RCC_ClockConfig+0x1bc>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	4a52      	ldr	r2, [pc, #328]	; (8002340 <HAL_RCC_ClockConfig+0x1bc>)
 80021f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021fc:	4b50      	ldr	r3, [pc, #320]	; (8002340 <HAL_RCC_ClockConfig+0x1bc>)
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	494d      	ldr	r1, [pc, #308]	; (8002340 <HAL_RCC_ClockConfig+0x1bc>)
 800220a:	4313      	orrs	r3, r2
 800220c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b00      	cmp	r3, #0
 8002218:	d044      	beq.n	80022a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d107      	bne.n	8002232 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002222:	4b47      	ldr	r3, [pc, #284]	; (8002340 <HAL_RCC_ClockConfig+0x1bc>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d119      	bne.n	8002262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e07f      	b.n	8002332 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2b02      	cmp	r3, #2
 8002238:	d003      	beq.n	8002242 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800223e:	2b03      	cmp	r3, #3
 8002240:	d107      	bne.n	8002252 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002242:	4b3f      	ldr	r3, [pc, #252]	; (8002340 <HAL_RCC_ClockConfig+0x1bc>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d109      	bne.n	8002262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e06f      	b.n	8002332 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002252:	4b3b      	ldr	r3, [pc, #236]	; (8002340 <HAL_RCC_ClockConfig+0x1bc>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e067      	b.n	8002332 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002262:	4b37      	ldr	r3, [pc, #220]	; (8002340 <HAL_RCC_ClockConfig+0x1bc>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f023 0203 	bic.w	r2, r3, #3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	4934      	ldr	r1, [pc, #208]	; (8002340 <HAL_RCC_ClockConfig+0x1bc>)
 8002270:	4313      	orrs	r3, r2
 8002272:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002274:	f7fe fe2a 	bl	8000ecc <HAL_GetTick>
 8002278:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800227a:	e00a      	b.n	8002292 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800227c:	f7fe fe26 	bl	8000ecc <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	f241 3288 	movw	r2, #5000	; 0x1388
 800228a:	4293      	cmp	r3, r2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e04f      	b.n	8002332 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002292:	4b2b      	ldr	r3, [pc, #172]	; (8002340 <HAL_RCC_ClockConfig+0x1bc>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 020c 	and.w	r2, r3, #12
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d1eb      	bne.n	800227c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022a4:	4b25      	ldr	r3, [pc, #148]	; (800233c <HAL_RCC_ClockConfig+0x1b8>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d20c      	bcs.n	80022cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022b2:	4b22      	ldr	r3, [pc, #136]	; (800233c <HAL_RCC_ClockConfig+0x1b8>)
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	b2d2      	uxtb	r2, r2
 80022b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ba:	4b20      	ldr	r3, [pc, #128]	; (800233c <HAL_RCC_ClockConfig+0x1b8>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0307 	and.w	r3, r3, #7
 80022c2:	683a      	ldr	r2, [r7, #0]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d001      	beq.n	80022cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e032      	b.n	8002332 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0304 	and.w	r3, r3, #4
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d008      	beq.n	80022ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022d8:	4b19      	ldr	r3, [pc, #100]	; (8002340 <HAL_RCC_ClockConfig+0x1bc>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	4916      	ldr	r1, [pc, #88]	; (8002340 <HAL_RCC_ClockConfig+0x1bc>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0308 	and.w	r3, r3, #8
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d009      	beq.n	800230a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022f6:	4b12      	ldr	r3, [pc, #72]	; (8002340 <HAL_RCC_ClockConfig+0x1bc>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	490e      	ldr	r1, [pc, #56]	; (8002340 <HAL_RCC_ClockConfig+0x1bc>)
 8002306:	4313      	orrs	r3, r2
 8002308:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800230a:	f000 f821 	bl	8002350 <HAL_RCC_GetSysClockFreq>
 800230e:	4602      	mov	r2, r0
 8002310:	4b0b      	ldr	r3, [pc, #44]	; (8002340 <HAL_RCC_ClockConfig+0x1bc>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	091b      	lsrs	r3, r3, #4
 8002316:	f003 030f 	and.w	r3, r3, #15
 800231a:	490a      	ldr	r1, [pc, #40]	; (8002344 <HAL_RCC_ClockConfig+0x1c0>)
 800231c:	5ccb      	ldrb	r3, [r1, r3]
 800231e:	fa22 f303 	lsr.w	r3, r2, r3
 8002322:	4a09      	ldr	r2, [pc, #36]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 8002324:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002326:	4b09      	ldr	r3, [pc, #36]	; (800234c <HAL_RCC_ClockConfig+0x1c8>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4618      	mov	r0, r3
 800232c:	f7fe fd8a 	bl	8000e44 <HAL_InitTick>

  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40023c00 	.word	0x40023c00
 8002340:	40023800 	.word	0x40023800
 8002344:	08002590 	.word	0x08002590
 8002348:	20000008 	.word	0x20000008
 800234c:	2000000c 	.word	0x2000000c

08002350 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002350:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002354:	b090      	sub	sp, #64	; 0x40
 8002356:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002358:	2300      	movs	r3, #0
 800235a:	637b      	str	r3, [r7, #52]	; 0x34
 800235c:	2300      	movs	r3, #0
 800235e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002360:	2300      	movs	r3, #0
 8002362:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002364:	2300      	movs	r3, #0
 8002366:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002368:	4b59      	ldr	r3, [pc, #356]	; (80024d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f003 030c 	and.w	r3, r3, #12
 8002370:	2b08      	cmp	r3, #8
 8002372:	d00d      	beq.n	8002390 <HAL_RCC_GetSysClockFreq+0x40>
 8002374:	2b08      	cmp	r3, #8
 8002376:	f200 80a1 	bhi.w	80024bc <HAL_RCC_GetSysClockFreq+0x16c>
 800237a:	2b00      	cmp	r3, #0
 800237c:	d002      	beq.n	8002384 <HAL_RCC_GetSysClockFreq+0x34>
 800237e:	2b04      	cmp	r3, #4
 8002380:	d003      	beq.n	800238a <HAL_RCC_GetSysClockFreq+0x3a>
 8002382:	e09b      	b.n	80024bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002384:	4b53      	ldr	r3, [pc, #332]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002386:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002388:	e09b      	b.n	80024c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800238a:	4b53      	ldr	r3, [pc, #332]	; (80024d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800238c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800238e:	e098      	b.n	80024c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002390:	4b4f      	ldr	r3, [pc, #316]	; (80024d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002398:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800239a:	4b4d      	ldr	r3, [pc, #308]	; (80024d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d028      	beq.n	80023f8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023a6:	4b4a      	ldr	r3, [pc, #296]	; (80024d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	099b      	lsrs	r3, r3, #6
 80023ac:	2200      	movs	r2, #0
 80023ae:	623b      	str	r3, [r7, #32]
 80023b0:	627a      	str	r2, [r7, #36]	; 0x24
 80023b2:	6a3b      	ldr	r3, [r7, #32]
 80023b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80023b8:	2100      	movs	r1, #0
 80023ba:	4b47      	ldr	r3, [pc, #284]	; (80024d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80023bc:	fb03 f201 	mul.w	r2, r3, r1
 80023c0:	2300      	movs	r3, #0
 80023c2:	fb00 f303 	mul.w	r3, r0, r3
 80023c6:	4413      	add	r3, r2
 80023c8:	4a43      	ldr	r2, [pc, #268]	; (80024d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80023ca:	fba0 1202 	umull	r1, r2, r0, r2
 80023ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80023d0:	460a      	mov	r2, r1
 80023d2:	62ba      	str	r2, [r7, #40]	; 0x28
 80023d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023d6:	4413      	add	r3, r2
 80023d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023dc:	2200      	movs	r2, #0
 80023de:	61bb      	str	r3, [r7, #24]
 80023e0:	61fa      	str	r2, [r7, #28]
 80023e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80023ea:	f7fd feed 	bl	80001c8 <__aeabi_uldivmod>
 80023ee:	4602      	mov	r2, r0
 80023f0:	460b      	mov	r3, r1
 80023f2:	4613      	mov	r3, r2
 80023f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023f6:	e053      	b.n	80024a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023f8:	4b35      	ldr	r3, [pc, #212]	; (80024d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	099b      	lsrs	r3, r3, #6
 80023fe:	2200      	movs	r2, #0
 8002400:	613b      	str	r3, [r7, #16]
 8002402:	617a      	str	r2, [r7, #20]
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800240a:	f04f 0b00 	mov.w	fp, #0
 800240e:	4652      	mov	r2, sl
 8002410:	465b      	mov	r3, fp
 8002412:	f04f 0000 	mov.w	r0, #0
 8002416:	f04f 0100 	mov.w	r1, #0
 800241a:	0159      	lsls	r1, r3, #5
 800241c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002420:	0150      	lsls	r0, r2, #5
 8002422:	4602      	mov	r2, r0
 8002424:	460b      	mov	r3, r1
 8002426:	ebb2 080a 	subs.w	r8, r2, sl
 800242a:	eb63 090b 	sbc.w	r9, r3, fp
 800242e:	f04f 0200 	mov.w	r2, #0
 8002432:	f04f 0300 	mov.w	r3, #0
 8002436:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800243a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800243e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002442:	ebb2 0408 	subs.w	r4, r2, r8
 8002446:	eb63 0509 	sbc.w	r5, r3, r9
 800244a:	f04f 0200 	mov.w	r2, #0
 800244e:	f04f 0300 	mov.w	r3, #0
 8002452:	00eb      	lsls	r3, r5, #3
 8002454:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002458:	00e2      	lsls	r2, r4, #3
 800245a:	4614      	mov	r4, r2
 800245c:	461d      	mov	r5, r3
 800245e:	eb14 030a 	adds.w	r3, r4, sl
 8002462:	603b      	str	r3, [r7, #0]
 8002464:	eb45 030b 	adc.w	r3, r5, fp
 8002468:	607b      	str	r3, [r7, #4]
 800246a:	f04f 0200 	mov.w	r2, #0
 800246e:	f04f 0300 	mov.w	r3, #0
 8002472:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002476:	4629      	mov	r1, r5
 8002478:	028b      	lsls	r3, r1, #10
 800247a:	4621      	mov	r1, r4
 800247c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002480:	4621      	mov	r1, r4
 8002482:	028a      	lsls	r2, r1, #10
 8002484:	4610      	mov	r0, r2
 8002486:	4619      	mov	r1, r3
 8002488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800248a:	2200      	movs	r2, #0
 800248c:	60bb      	str	r3, [r7, #8]
 800248e:	60fa      	str	r2, [r7, #12]
 8002490:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002494:	f7fd fe98 	bl	80001c8 <__aeabi_uldivmod>
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	4613      	mov	r3, r2
 800249e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024a0:	4b0b      	ldr	r3, [pc, #44]	; (80024d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	0c1b      	lsrs	r3, r3, #16
 80024a6:	f003 0303 	and.w	r3, r3, #3
 80024aa:	3301      	adds	r3, #1
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80024b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80024ba:	e002      	b.n	80024c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024bc:	4b05      	ldr	r3, [pc, #20]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x184>)
 80024be:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80024c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3740      	adds	r7, #64	; 0x40
 80024c8:	46bd      	mov	sp, r7
 80024ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024ce:	bf00      	nop
 80024d0:	40023800 	.word	0x40023800
 80024d4:	00f42400 	.word	0x00f42400
 80024d8:	017d7840 	.word	0x017d7840

080024dc <__libc_init_array>:
 80024dc:	b570      	push	{r4, r5, r6, lr}
 80024de:	4d0d      	ldr	r5, [pc, #52]	; (8002514 <__libc_init_array+0x38>)
 80024e0:	4c0d      	ldr	r4, [pc, #52]	; (8002518 <__libc_init_array+0x3c>)
 80024e2:	1b64      	subs	r4, r4, r5
 80024e4:	10a4      	asrs	r4, r4, #2
 80024e6:	2600      	movs	r6, #0
 80024e8:	42a6      	cmp	r6, r4
 80024ea:	d109      	bne.n	8002500 <__libc_init_array+0x24>
 80024ec:	4d0b      	ldr	r5, [pc, #44]	; (800251c <__libc_init_array+0x40>)
 80024ee:	4c0c      	ldr	r4, [pc, #48]	; (8002520 <__libc_init_array+0x44>)
 80024f0:	f000 f820 	bl	8002534 <_init>
 80024f4:	1b64      	subs	r4, r4, r5
 80024f6:	10a4      	asrs	r4, r4, #2
 80024f8:	2600      	movs	r6, #0
 80024fa:	42a6      	cmp	r6, r4
 80024fc:	d105      	bne.n	800250a <__libc_init_array+0x2e>
 80024fe:	bd70      	pop	{r4, r5, r6, pc}
 8002500:	f855 3b04 	ldr.w	r3, [r5], #4
 8002504:	4798      	blx	r3
 8002506:	3601      	adds	r6, #1
 8002508:	e7ee      	b.n	80024e8 <__libc_init_array+0xc>
 800250a:	f855 3b04 	ldr.w	r3, [r5], #4
 800250e:	4798      	blx	r3
 8002510:	3601      	adds	r6, #1
 8002512:	e7f2      	b.n	80024fa <__libc_init_array+0x1e>
 8002514:	080025a8 	.word	0x080025a8
 8002518:	080025a8 	.word	0x080025a8
 800251c:	080025a8 	.word	0x080025a8
 8002520:	080025ac 	.word	0x080025ac

08002524 <memset>:
 8002524:	4402      	add	r2, r0
 8002526:	4603      	mov	r3, r0
 8002528:	4293      	cmp	r3, r2
 800252a:	d100      	bne.n	800252e <memset+0xa>
 800252c:	4770      	bx	lr
 800252e:	f803 1b01 	strb.w	r1, [r3], #1
 8002532:	e7f9      	b.n	8002528 <memset+0x4>

08002534 <_init>:
 8002534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002536:	bf00      	nop
 8002538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800253a:	bc08      	pop	{r3}
 800253c:	469e      	mov	lr, r3
 800253e:	4770      	bx	lr

08002540 <_fini>:
 8002540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002542:	bf00      	nop
 8002544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002546:	bc08      	pop	{r3}
 8002548:	469e      	mov	lr, r3
 800254a:	4770      	bx	lr
